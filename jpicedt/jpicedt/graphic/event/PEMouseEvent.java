// PEMouseEvent.java --- -*- coding: iso-8859-1 -*-
// January 3, 2002 - jPicEdt, a picture editor for LaTeX.
// Copyright (C) 1999/2006 Sylvain Reynal
//
// Author: Sylvain Reynal
//         Département de Physique
//         École Nationale Supérieure de l'Électronique et de ses Applications (ÉNSÉA)
//         6, avenue du Ponceau
//         95014 CERGY CEDEX
//         FRANCE
//
//         Tel : +33 130 736 245
//         Fax : +33 130 736 667
//         e-mail : reynal@ensea.fr
//
// Version: $Id: PEMouseEvent.java,v 1.13 2013/03/27 07:06:27 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et respectant les principes de
// diffusion des logiciels libres. Vous pouvez utiliser, modifier et/ou redistribuer ce programme sous les
// conditions de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA sur le site
// "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie, de modification et de
// redistribution accordés par cette licence, il n'est offert aux utilisateurs qu'une garantie limitée.  Pour
// les mêmes raisons, seule une responsabilité restreinte pèse sur l'auteur du programme, le titulaire des
// droits patrimoniaux et les concédants successifs.
//
// À cet égard l'attention de l'utilisateur est attirée sur les risques associés au chargement, à
// l'utilisation, à la modification et/ou au développement et à la reproduction du logiciel par l'utilisateur
// étant donné sa spécificité de logiciel libre, qui peut le rendre complexe à manipuler et qui le réserve
// donc à des développeurs et des professionnels avertis possédant des connaissances informatiques
// approfondies.  Les utilisateurs sont donc invités à charger et tester l'adéquation du logiciel à leurs
// besoins dans des conditions permettant d'assurer la sécurité de leurs systèmes et ou de leurs données et,
// plus généralement, à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris connaissance de la licence
// CeCILL, et que vous en avez accepté les termes.
//
/// Commentary:

//



/// Code:
package jpicedt.graphic.event;

import jpicedt.graphic.PECanvas;
import jpicedt.graphic.PicPoint;

import java.awt.event.MouseEvent;
import java.awt.event.InputEvent;
import java.util.EventObject;


/**
 * This is an enriched implementation of <code>MouseEvent</code> that return mouse coordinates in
 * model-coordinates in addition to the usual screen-coordinates.
 * @author Sylvain Reynal
 * @version $Id: PEMouseEvent.java,v 1.13 2013/03/27 07:06:27 vincentb1 Exp $
 * @since jpicedt 1.3.2
 */
public class PEMouseEvent extends EventObject {

	private MouseEvent awtEvent;
	private PicPoint pt;

	/**
	 * @param awtEvent the "standard" <code>MouseEvent</code>, as generated by <code>Component</code>'s
	 * <code>processMouse<var>XXX</var>Event</code> method.
	 * @param source This constrains <code>PEMouseEvent</code>'s to be generated by
	 *        <code>PEMouseListener</code>'s attached to <code>PECanvas</code>'s only. This indeed is the only
	 *        event source that makes sense with this kind of events (notably because we need the zoom factor
	 *        at some point).
	 * @param pt coordinates of click point in model-coordinate system
	 */
	public PEMouseEvent(MouseEvent awtEvent, PECanvas source, PicPoint pt){

			super(source);
			this.awtEvent = awtEvent;
			this.pt = pt;
	}

	/**
	 * @return the "standard" <code>MouseEvent</code> wrapped in this <code>PEMouseEvent</code> ; this may be
	 * used to retrieve the <code>MouseEvent</code>'s fields not accessible through
	 * <code>PEMouseEvent</code>'s methods.
	 */
	public MouseEvent getAwtMouseEvent(){
		return awtEvent;
	}

	/**
	 * Return the PECanvas on which this mouse event occured
	 */
	public PECanvas getCanvas(){
		return (PECanvas)awtEvent.getSource(); // guaranteed not to raise a ClassCastException !
	}

	/**
	 * Return the x-coordinate of the mouse click point in model-coordinate.
	 */
	public double getX(){
		return pt.x;
	}

	/**
	 * Return the y-coordinate of the mouse click point in model-coordinate.
	 */
	public double getY(){
		return pt.y;
	}

	/**
	 * @return the coordinates of the mouse click point in model-coordinate ; returned value is NOT guaranteed
	 *         to remain unchaged over time ! Make a copy if you need an immutable value (e.g. using new
	 *         PicPoint(pt)).
	 */
	public PicPoint getPicPoint(){
		return pt;
	}


	/**
	 * @return the number of mouse clicks associated with this event
	 */
	public int getClickCount(){
		return awtEvent.getClickCount();
	}

	/**
	 * Return  the modifiers flag for this mouse event
	 * @see java.awt.event.InputEvent
	 */
	public int getModifiers(){
		return awtEvent.getModifiers();
	}

	/**
	 * Return  the modifiers flag for this mouse event
	 * @see java.awt.event.InputEvent
	 */
	public int getModifiersEx(){ // since JDK1.4
		return awtEvent.getModifiersEx();
	}

	/**
	 * Convenience method to test the state of all modal keys and mouse buttons just after the mouse event occured.
	 * Mask are made of InputEvent's mask OR'ed together
	 * @param onMask keys/buttons which must be on, e.g. SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK
	 * @param offMask keys/buttons which must be off, e.g. CTRL_DOWN_MASK | ALT_DOWN_MASK
	 * @see java.awt.event.InputEvent (extended modifiers masks have been introduced starting from JDK1.4)
	 */
	public boolean checkModifiersEx(int onMask, int offMask){
		if ((getModifiersEx() & (onMask|offMask)) == onMask) return true;
		return false;
	}

	/**
	 * Return whether or not the ALT modifier is down on this mouse event
	 */
	public boolean isAltDown(){
		return awtEvent.isAltDown();
	}

	/**
	 * Return whether or not the "AltGr" modifier is down on this mouse event
	 */
	public boolean isAltGraphDown(){
		return awtEvent.isAltGraphDown();
	}

	/**
	 * Return whether or not the CTRL modifier is down on this mouse event
	 */
	public boolean isControlDown(){
		return awtEvent.isControlDown();
	}

	/**
	 * Return whether or not the META (aka ALT) modifier is down on this mouse event
	 */
	public boolean isMetaDown(){
		return awtEvent.isMetaDown();
	}

	/**
	 * Return whether or not the SHIFT modifier is down on this mouse event
	 */
	public boolean isShiftDown(){
		return awtEvent.isShiftDown();
	}

	/**
	 * Return whether or not the Left button was pressed
	 */
	public boolean isLeftButton(){
		return (awtEvent.getModifiers() & InputEvent.BUTTON1_MASK) != 0;
	}

	/**
	 * Return whether or not the Middle button was pressed ([pending] what happens on MacOS ?)
	 */
	public boolean isMiddleButton(){
		return (awtEvent.getModifiers() & InputEvent.BUTTON2_MASK) != 0;
	}

	/**
	 * Return whether or not the Right button was pressed
	 */
	public boolean isRightButton(){
		return (awtEvent.getModifiers() & InputEvent.BUTTON3_MASK) != 0;
	}

	/**
	 * @return whether or not this mouse event is the popup-menu trigger event
	 */
	public boolean isPopupTrigger(){
		//return awtEvent.isPopupTrigger();
		// terrible hack : isPopupTrigger work weird on windows (triggered by a mouse released !)
		//return (awtEvent.getModifiers()==InputEvent.BUTTON2_MASK || awtEvent.getModifiers()==InputEvent.BUTTON3_MASK);
		return isRightButton();
	}

	public String toString(){
		return "PEMouseEvent:"
		//+ "src=" + getBoard()
		+ " x=" + pt.x
		+ " y=" + pt.y
		+ " Buttons="
		+ (isLeftButton() ? "^" : "-")
		+ (isMiddleButton() ? "^" : "-")
		+ (isRightButton() ? "^" : "-")
		+ " Modifiers="
		+ (isShiftDown() ? "Shift " : "")
		+ (isAltDown() ? "Alt " : "")
		+ (isAltGraphDown() ? "AltGr " : "")
		+ (isControlDown() ? "Ctrl " : "")
		+ (isMetaDown() ? "Meta " : "")
		+ (isPopupTrigger() ? "Popup " : "")
		+ " Clicks="
		+ getClickCount();
	}


}
