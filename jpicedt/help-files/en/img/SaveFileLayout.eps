%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: help-en.SaveFileLayout.dvi
%%CreationDate: Sat Mar 02 13:57:07 2013
%%BoundingBox: 71 719 569 1055
%%DocumentFonts: CMR5 CMSY5 CMR12
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: "c:\Program Files\MiKTeX 2.9\miktex\bin\dvips.exe" -E
%+ help-en.SaveFileLayout.dvi -o
%+ ../../help-files/en/img/SaveFileLayout.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.03.02:1357
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: SaveFileLayout.eps,v 1.3 2013/03/02 13:00:23 vincentb1 Exp $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: SaveFileLayout.eps,v 1.3 2013/03/02 13:00:23 vincentb1 Exp $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: SaveFileLayout.eps,v 1.3 2013/03/02 13:00:23 vincentb1 Exp $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: SaveFileLayout.eps,v 1.3 2013/03/02 13:00:23 vincentb1 Exp $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

/preview@version(CVS-1.125)def

userdict begin/preview-bop-level 0 def/bop-hook{/preview-bop-level
dup load dup 0 le{/isls false def/vsize 792 def/hsize 612 def}if 1
add store}bind def/eop-hook{/preview-bop-level dup load dup 0 gt{1
sub}if store}bind def end

/preview@tightpage true def (compatibility PostScript comment for dvipng<=1.5

userdict begin/bop-hook{7{currentfile token not{stop}if 65781.76 div
DVImag mul}repeat 72 add 72 2 copy gt{exch}if 4 2 roll neg 2 copy lt{exch}if
dup 0 gt{pop 0 exch}{exch dup 0 lt{pop 0}if}ifelse 720 add exch 720
add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat <</PageSize[5 -1 roll
6 index sub 5 -1 roll 5 index sub]/PageOffset[7 -2 roll [1 1 dtransform
exch]{0 ge{neg}if exch}forall]>>setpagedevice//bop-hook exec}bind def
end

userdict (some extra code to avoid dvipng>=1.6 unknown special: 7{currentfile token not{stop}if 65781.76 div }))
pop

userdict begin/bop-hook{preview-bop-level 0 le{7{currentfile token
not{stop}if 65781.76 div DVImag mul}repeat 72 add 72 2 copy gt{exch}if
4 2 roll neg 2 copy lt{exch}if dup 0 gt{pop 0 exch}{exch dup 0 lt{pop
0}if}ifelse 720 add exch 720 add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat
<</PageSize[5 -1 roll 6 index sub 5 -1 roll 5 index sub]/PageOffset[7
-2 roll [1 1 dtransform exch]{0 ge{neg}if exch}forall]>>setpagedevice}if//bop-hook
exec}bind def end
 
@fedspecial end
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 45 /hyphen put
dup 58 /colon put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC15BAA041EF80C5BDC12EC1F5786BB41A5A21
073EE0A49723BBCE7DA340F1C454FA5D74812C7425D1EE1E393BBA647136A38E
1DA4A94728957578C7D38CB7BA46AB7D9B9499B894F2E9E40245BE1D7DC6F824
BC9477CBC0F708F0CE573D3F01E65DAAE1DF4E6B295D72ADFC1B2DC969ADC4A7
29B58F3133DBEA5CD1A74475F36D7ABCC03EE7E2A10D1FE691EEBC3E6885BB72
A570030B0854D6E51FB67798552D9960FE820FFD982A9179E5056B3C085580A0
082D1D73E79869B92E19E91E073C92BA72B9139627CB442A5D61F8B30A43E4FD
9CD6F4216865D4DAE24289601E2411B5ADA025ED4062231E372A88C843252690
DE3E982E53A0958437AD4295C935536FF3ACA60E3CE0AEF4F851D5C428C78BFB
6AF4C53265A9DD46D4BB8A3F070B5A353098B6BA17B15B1215CA9C28659E86B2
897DE767994941E9A5D7C7226C9749652E731CC6D10FE25188BAEC8FA80520DA
E4625F292FAA647F7C9FBBF7DD9C5953ABFA38F4FF5C3C2EBB07E64801F82838
3581368DA093A3F37A22112C0B33B32ADDCFF4F83D7657F1BA59AA153AEFA7E0
DEAB83F706C73DF7057A2069F03ACDAB9D4BBC7FFF4013BA32651A88CCC288DB
00516C2FB77DE6E7A3EE7079D43350A7510B6908C8F5DA9746069A1FFE663FB5
B49BF4FAC9EE7BBA57CF0A9AFEB5B7107C95ACB013A1EAE003574CB4F4645FE3
16567D7A38F4C66BAE04DB33CF998442A900BCD1ACA09ADBDD94F7928D25BDC0
4980FC02111363D8C2529930EF0C24814B1DC5A7B655816D1F45E8660024B2A4
7849F0E009A6C83B44B675FD327777164A0FA629EF4863906689494A7052FD7C
1405B9446D7708E2203DAE8CA21C82EDFB6B8102C8081ADF714C0E29CA406BC1
9D17FAC8AC9F65D4A4D9E6B1470ABD85332FBB4D50CA6C47A7F4988394AB789E
53EEC67C27AD59152714EA838E13A4EB6A1184239CE7FE57C59ED52DF91D5DD4
F6A94AD988D2873A7B81BD54B1634F0B9B0A9C703072B1EDE6DFDC07CC348E15
548EFEAB251AB87480383DAFD2E95477A20DCA793CBF9233CBF1B69C61F57561
EC8B11AAA762534A46F972E653E5EDF98934AA75F24B242DE060099A3ED899F1
197ADF8AB90D3A7F850D379D0C7178B8C0050AFA3BB02ECE83848670EB1A875E
E2177A1F45EF272D9D8D1BDC798E3CC611C3C1552668E851BCDF552D757751BB
8D3A8FD9FA7EA0087B38A8539AFF706CDC4B1447BFA3A6570341BDBBFF4C68BE
A1687637C322E54A76CA2A67E8EA13BA073B4750F10F5C0BF705502B6898C02C
938618CFE394C2CB78E4EA7AE0C46D9F7CC3AA3DAA60F944B9337A7FD82436D0
19A0E5E4A86A69244F5588E03BE99546159C67031039E19406743BAB371E119D
0743033AD2E92F3A62CB22B325F1C661983FF5F6864A73195645D507AE47155A
E96CD4B84900EAA5B68F32A0A9364DBC4228103A991DB24D4BDFCEC8246879D0
5E10F65C866FD7EA4C461668639312CCBCDFB191C18F692A741ABB01BA5BC923
61E355B8A6A8E0A5C8AC1931B7B84CBC6974AA4B1F073A97543167ABC196553B
5F27591775A718F4E0100E9F0F60BA6EA2D0A2051AF5AE0AD6547AE7CEF7491A
D6C66659BAB7A9497CDD1F74D731C765C06EB733D8A7E0B6DFBB9B55640A81CC
F117E45D66070F222C9CD6177D8E4A80822E3C77AD0B115C48C6604926149B90
2FB36B5424031D033526BC5DB325734FE34F11A3CCC3A430BA0E5BDA077BEC4E
1210934F66EEF2F45A7E4D826E93C07E07BC08AC01B637FAAC64994ECD5D98D5
6B8C97A8DCEC03071CCA4C2119C64C11DE107D45A9C7C77126F23B2D3E854423
93C2980F6D8F271C85A89319A3384E2C60404EF051ADB6A6A5CD2FC7B77734ED
02D31080C5E8D50C348D64B8F2BE24310585FE9E63ED63A9AF29C5DD3E1D76CF
2292B977EEE9D949180EF55D88A3731C74947C94482B242AF0DC5F167674F4EB
1747D4BC15A09BA8CDE7D2915C8ABCFE3C7A7E0451207DCA6BAB53E5DC3A499A
AC73A6593E73E80AA180022CC9078313554D8F85A6D019231257245E7F8F8CB9
FCBC4BF7C4924DB19993BA8AF086AEE2521323A91736EDCDA051A4792DBD81AE
361A534B831788D190E79CA879DAB7341752EF1BA8A49ACE3563EEE9F80B2F69
91233A1E0FA0A5817C37C4E17FA6831417CDBEAA800E956028F582E73C7F1CA8
D7E4598397A0C093C6B601FBE7C95C4F6EEA46B434E72BC615092F10B9A251C4
45EB94CDFE34F65A869ED2EA01A22994F63B7C2247AFD62F7F0AB74A7F5B387F
69B3175D5652FBCCCD28176F261C49BE6CBF31DDB45894567CC00B2E4C90BCB2
E31646AB48B63B4D74F59F9E3F71F85AFBD9D25F35CE40BF22738063F2B2BBC0
75F8C98A5FE2875198F6E643293CAC1761E6B7B22565F086F14F8479DD2D0CEA
3A4655377A7A1A0780E86880F5FF89A8E579E044FDD2C97711B77DF7360EF644
97FC033A4781DE03141BCDB01BA19DB10BDAF5B73AB4A5A4E1627BAA967D2281
3C9BF601AA01FC9F5A5A5EDC77C73B2853184316467146BD710E7B27E818D7B5
81C6FDF402E988835B6620A0CA7C67790DC33141B0AD8F9383BE84F5B6ECEE1C
1967154B198D3D1371D7A54B7CB2371DD4A8F3DD7E576824B2568077CFDBD4A9
071EE26E6063C50C84B031FEA7426974A25B4E9EAD54EBAA61B9A0A89D99D5BB
E547A330AB5BC0ACC4D1000A1C67D4E0C274612AE2DF54819E37C4F57A41FDEA
6DC98087D26076A63690A2D0CAE007209FF4D5F4C2DF435649E07C7BD9EEAF6A
346AE744F349CCA92746692458D7A2B74A95A73928C9B068F3F125F9D67C00E7
38D2FAAA9F9C8B2C282335B91D9A24ACD7E0CCB7324D976E19ED37901E11519E
C57D3F42E396067DE2E5559F98CED13575A442F0980210151CE09AD176EB2FEE
CB1B4C8111658496D51D7B12EFC5D9AE17688780137E8976C164438D13FEB273
1A200B69338E5A7F0E20905E07332C11A5865D51C36140D9DC6FC4A8FA1F713E
36F0D615CB82B46BFC0ADDA32753368E36DE1DBED64EA2EC74AAD7F654612B6E
9C422CCC2F3A5636F8EDDA1BAF5AFF14D292375F24A8E1F82CCE2B518FF58081
600D084CC15FEC3932BAE3C28E484AF19C891C1BBD4806A09A2FEA0A000E2748
4E88614053268E30F076D5F26C543A006B53DF305EA68A5196F030B4756D50B3
CE55A36A2AFF6DE6CD67E2246842F8977EB004CE0EA1B50FBEBF9B0C10911228
4FA9D2F23F71FD6BC8C189D47F3DC5455CD0ABDB0CC735F317F2A4BD7E4E92CC
63A4CC9B038BC15EC1A1E71BAF45FBB350C413761ED158A74F0042FC424A389E
8903579796800D0D6A4407146D146F1466AB0947C73585374BAD5B3F45F468D1
1BC63810195A0E9B6984051F0966F83B126752C2BA1F7BC67D5FD0EA7AB53E96
725A4C3540451A19FB7D2ABCA633F5550DB8A8D2CC52AAB5EFD8E22597E96033
BC0D44F37343080D96642B6FB3F6441C495274C035AB9583C258F150B3602C80
8ECDB45C0778BCA0D416BBAC01486A3DD156DD1A8B081CDFE476418860E67CA8
32FAD023BB020ECAB7CB7766E73788C189F83060ADC0F803266852C4ECDDAF8C
2F392FB41732527E90A9BA7C89014704B96087CBF1FA1BB8012324A3CCE12575
05612EB3A5C95F178D32F74E19048C417947D283D9DA249F8D200323147BBE24
E05040606ADFD9E254752E104B8A02D69CE506974123CEC97A2B52ABE356E54A
FC363BA9F8225613EB5D11D930748F4E26C1A55B8988516CF88C0EE758A44D40
4B447AAB8A896BB6003B73B73E71247C8770894166ACE77413A817521319137B
6082E77F925EBABABDFFBEEE370B6D94709D81353FCB3E8E097B53CE6529A3FA
B5A43FC35002B557AF661746D002D2C224AB509FF292D0D6DB1365FFB8A6DCED
285BB6012C89019D233A2AF26D6D03E30C31A7E8F4A55397C1D9A474EE4FB708
15707DD1FD06B7065EFA3285D9829365EC477E2F0BFC149B18830638BF6764D6
A8B5A6DA50AFAAEFED23B85C3A65667EEDA14089576C858CE24872E58748F8EC
519BE0C1E4AEB2F46364D15E6D75D3C9A551463AB5E370D2BBC431B6B1FD185F
60FB4A5F7AADF449BFE1471C18739BA5F7EBDAE3B88A0CE460B1183DD282C483
F2676427C63FE9DA78EBF6F2405F0133E9D628DA7AE2ED283666CD7EEDD89CF1
FE296E27220BD300A47D01210FCE9610977C6ADF220FFB85BE04B4354F4CB664
08D02CD7A200A3D62102B1A3DA43FD57C78E644EBF7F374F8DB84E95ECD900F1
DC73A74686D694EC09C96BB6400C3C7F6B24CE9FB8F88636257FD8046C7A107A
CFA2C434FADCFD5717BCE9B2A959D841A18750B54D4673D46746E57A93D71963
A81F30990743E007D411EC40BDFFD0822E16FCA664E58D086B07D16EC03EFC91
5F614AE4BEE0B7284A52C9AC7718685D2F667397FD696C6EA8225410DAA15224
8FFDDABED0F7CC1100CA7EEE8B1E405B22AC3CD9DF38E8AD7658117D03167752
7079C2EA6EB97A829C30E43AF0563E388A367A7E5E7D33A89FC82396B04902A7
067C98A0EE3A3C9D17F3156375EEECDE011466270ADC4C9D9A0538CDCC59AB2B
9AB2B2A0BD418298892D54E0E804E919DEB507BE52904872BE9182577F34AD8E
CDC2D947A0BCC705BD6E6889808AD7927BFF0874F1BD48664A176744E469858D
4F3F0FDCA603CD02C4661BF7D1CA16EBD7F8A1FADA1EDCB4B2F70E44110A519D
8A8D21D6BAA90FE4EACDB24475569CC886E3062AFA2612993A6E3785D630F2A1
B8E5D3D267033929A8F3627857FA64AAAE110C15186F0904483D052AA6F44888
1FE7336D23B2ACDEEB7A944EBDC2FB541C74C533A25236F19C4BE8ADE759EFAF
1516DDE5C6E7C681464FF1B20547FDF597302C83E8EB5D1AB651C57AE6A9BE9B
93B86457ED1883ABB9F7BA6529595E54D357FB5374176B07DAF2A3893560A66F
C8F9CC17FEB77D7DC8958EA7B90E04A3B2E74B577F199D627BC269EE66B4D659
A5E3BF0C5F39AC6EB37A267ED55E409841A8AA0B1085B0F758746E2FA852AF1B
827240EECF7AE48D6FAEE609F7BC9219E0079D021286A3AEF7319BBF0D72B9D9
E5FA4DD3F3E2E0392E386907ECDF2A2A0DB87346809DE3A26025350BFE309FDE
CCE4290AA40A7A85F763F102212A1C1ACD13B79F3DCFE69E66AAC53153D90AAC
7CEC8EEDAA2D6280414917F488F5F6BFE916B135E0201C3457543CB79159C605
C80030047477788E0319A8FECC73D35C38827B867CD4AEA1D3CD14A17C757831
AEFE6A1152251F19F757AABC245D3EBBAF958250588F3C3BCE07137CA5F26BEB
26BB4793D5395E0B57446195D5324521D06594CBFAC8085128CD2B7EA7AEAD16
A3682E6ACB1F53D55DE757070ABFCE4DB6EEBA110100786F31156AAC68D3AA10
FE72E2F880A289AE2AA45C5D86D38236A74AE4A8C9B6746F44FEA3D15F83803F
3A5106DADBEEFB7828143AE5E7694EB943B3C74D43583D216205FCA1C89BC145
2A672412A727236CF9624E2B9E330D3910F5EC78DFF8EA5529155D63689AA5DD
5EF999F19D2106A0F816607BD1C8DBAA499A9D2E4CCC90C9CD7876F0F2E9CB51
C9F4DE31C8BF1191899EC063024DCAD28E208F4BCBBF5110B90C929BBC2A7CAC
9EB41CAB1AEFB1AEF8E48BAD346C4E0BD17E2BAFC86433D5E91741C89BAE02A5
98176581A342DE01C8F3F23538A58EC8C9BCA4FFD5DE3942EA7242D682C09552
1CF99C1439543626B67B59CC540193A2806E23B2F4CC565F6054F26D4FF23709
86E8DE22920337AEE87EE7B36EA5143D24ACD980301273B525E1D72340A7B3E0
8F146D7DE1E8554168020F857D56E7D7F1200A5F31AF4B1EFA293B208D17F35E
CB45F138A56A2F3196B474B04FAB33A148A4F32557E1CCBCC4516DF1A36B3770
5C0F19A7A70C2AD5ED5D9C54E89AF3DD59629BC0F75955C52658D7651D71F2C7
4D0BA7604E5CC485CC8579E5BB5AB6C9BB5ED67FC2F295481A184E9F2BDCB095
C4F835F619ED592FAD958D08669B941946E29DF567A226D44D0F1F1402DEFA99
8CE0D0D10B681C07EE3C6457950BE90B44AB1651D4BC017E6E6B40C512BF9AFB
028A70E5406A52DE5ADCDD65E55E78FF8517519C4B3F29292EBCB5ECB1C5DC5B
BA93F997C924680BE89BA891141D20E323FBDE29DF35800383DB45E6E0D7D8B6
9ACAA621DEEB6915D48F41FE0D086779D6A91D57240DA8CDBB1C5BA38D6272EF
32D14C3E040ABE76B197770BCE78D4445652E87DAD1F6FF6539A105EA093B276
2E037C5B9664B91F35431614C7C8B23E1C21F0C6592B6B4D2C2D37114C399257
A692304298DCE876515CD4AE0AFFD842FF20A446A9196DA66CF6D02B379D59CA
5DBE628707778F821C4DDE6922B77847C10DDA0DCC7C265CDB4EFFB2066FECC2
DE8E618B1953D7FAE665D93D9866CC554602EE2F2964AA9D28AD99203CBB2DCE
0949371EB2DFD5E783A269486D2790CC63878D862E8CF1180425E7F1569C33CF
A9CCDE7EE2000D8E9250F981809AC60555CAE5E8DDEDD5B1468C3DD11BA6C3B8
8173F95230EE320CF745FD5E67072B6F3341D82281CAD82654CBE3759B19E989
343C11A3E68B7F8DF4856D1C07D63D49DC364EEF5EF033D7D4613A383776DC4F
94E3FEFB851E5E4589FDA200C895884D292D2E08E970E81B7778C5C3A7EF8243
2621B79BDF0830D82C0E41148F7060A8FFCE336387DBF9CF194081DB6F5ED880
87A0EF8E3F15B4F3CC20AADBA7B954345DA3081E00456C0D0222254B6CDEA7B0
107DFBB64C07A981A0C8E1361E4DEE0B52F5186A20D8B0EFFE05EA5E4B92F4A2
F138836CBAE632C38568176E29E4850CC3DB0290A29F1EF3A9B43338870C2D93
26EA65DB2451E87EE4F02693D70EDFE21E7FE2B645FB6F64165612D170F57B9D
791ECD1A87D675A586E0B9BDAF90F6601B4C6C601DBE351CCC21AEDE8FB371AD
4DA62C9BA1C7DD5CAB855E1099816DD907E3E5D6622174BDE3AB39B42D02F6D5
556CE475841803BE1C2D192C739A38ACD9FE002ECED8C316854740D32E513B19
DE4622E0165709EDF964D44E564BB6A623507CD00156A39A9070DE2E3CCF04F5
306781A091F51FA7EC21CBB8D5B044B261FFE7DA8C6FA50959C9C4C9937DF990
5B40BEFE8F16386A3AA8C91F0B04FB0D804E5DE45A70E3EA09B49109257898F1
2CE6966548725171281ED8C8C17CD7608C3DEAAE72FCD4E96F748FC7613C8941
42895C888438FDA645B76E539211E6C075BCB01E4D381CD60C5580561057FE17
E7E0DE7F02803B892D0C7C5B19237DB7F59C80972C2A3675028738CA8C29A48C
514C7CFC430B2FE8148981444F5D0FA5AB65317DA22ED0EB4B04EBCFB3E88375
5CA26A053F78B035FD58158E4D0778E56D8E943058445A49BDBFB67ADCE0AF44
E4126C2EE97FBF32BDA1702CC7FC6BF60F81A93AE87BBA98B160324C86534390
215FED6305E160A253B74A94E989896A5653B5F44E9E10C42435BAB201779B7F
06A759B1B1CDBB54B4876AE22E1468286FF74EA0EFBCF546D3D62466B07E2E29
0D9EE22D8D4A76B5E979E5489829479EC755FE705892C34738F87A3A62153409
94498FBA194336827B2F986F68A8CFF887E7F93A87FE649D51C3D3BE287486D7
69F7162FE8C8480619A925E17B8CDBCFCBC544429458B46C286CB44696E36E82
D804A6EEA79B7093EE375E54A8B808DF2BC7DB3B405BA4BA4F99324273BD900F
009E798FC188584ABC2C9F316EFA2E9829695E15C0218F4AF8E9ADF362D82C9C
0F25A20C8E94EB935D1C0A16F571852BD9032037D82A32FA0636A386FBD53F94
3FB0F493BC504937DCCF2AEE797AE828D0D535E0402BC9A000DC55B1A586FD7A
E0DA5D19D72E87C46784712E56AA24615E17F5C3F7D8BE14C8851B0A17B78E04
26B255E7B9F5511BF8EED9254E41C013CEFEB4F19A97DBFEBF8C0AFD08654B0B
B4EE473A9DFFA22F9EB97753118450AE3C9C1B184D63D2044E468DD59F4F100B
2A8FF46B0DED4FB3E2C49C72E89DA0123627854F6B6E6228FB9B9EE93E4244B5
F317486FB85010677D940153FDD1DB6C85CC8EB8696BC707885266D98B5F787C
8C27299A04FE090428544013608663146F14EA22AA11A489B87A9C291D2BAE8C
CB4E6990BFB090367D754A15F83E2AB996FDB1A07899E4631B33B40F20AB8AD0
7F4EBF7E49FC5F731F49FED6D25F95FE23AE8F340C3185AC3DF9A5BF387AC074
79CEC0FE03B642C1686DA51C13A3E0A4580AD13BE5B8B437C155D643A190ABD0
627E056F5DCE9A971AC9F4926431ACD6743E692C1E527B3138AC385CE63FFB3A
50864104B1D8A1E675A0BC243EDCABBD045F47D78F7C454C0972D510A7BC31B5
3BAE7F29F836061BBBE25B9CCBCD22B3BFBD68D9135A50D8D1D81FD1BFF22934
B2B8B31A2BC5603EE6EBB49EB4B065776CAC87D83393FC0B6A7444F9C41032E5
6896DD8776822AC63E313CD430C23B647E4171B68AE91F300F6D92764D13C8D3
85B70D41E4F3FB0E78EF96CAB60193CCAB4EB3284854DE0950EBD427ED469D7A
064FB46BA09BCC7283A93EB6ADA891869E8EEF9A35B2A8663E9093EDB681C3FF
90243422C9ECC95EDF79AC9D07CEC9350334F0BB531C702EBF24BFC5F8A66A6A
FCFDEDFC569A4D28221FD8FE22151C7474E02F9419FD910E327358105B687DB6
B844EDB300F6AA010E91FD39ECCBCF530467B001957379FDC1519840201F43CE
74FFB2D2BD3CBB653B796818AB59F87DE6B662F7E6DA50B08A557BBCACF11EF5
EE62D85E9C1A842F869F806C43EEA2CDE830877C84F6D5CC95BB807D0249EB41
896E980B70B8DA2D26425C423EFFB22CFD702BE90087D2FAAE993CA9C9757CFC
55C35EB1280B38A81070471412A6696722E168BB186E101487009C4B5AA1C641
DB9778E8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY5
%!PS-AdobeFont-1.0: CMSY5 003.002
%%Title: CMSY5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY5 known{/CMSY5 findfont dup/UniqueID known{dup
/UniqueID get 5096646 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY5 def
/FontBBox {21 -944 1448 791 }readonly def
/UniqueID 5096646 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY5.) readonly def
/FullName (CMSY5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /braceleft put
dup 103 /braceright put
dup 110 /backslash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D77D0DAC26A1FA54
D2471EE9BE33D2E87853491D634A3F05B7672519E09291AC2D08D95BFB80CABC
FA89042E94FED8DC9929ECEFAF741D273687B2127F5B80ED7D16F146894841D5
1A80D8085E27114AC35CD5E578760D8982CF4D8587FD3385FE50E21A253A37E2
AB628DF3500FD2C21BCCBC8C0B6AD3AE21DE63AE6586DB06B3FB1966625EBF52
90FEBA873F819AB480FF994D80C01DE1E2F28C665E74FACFF98B2972CCCAD279
96F2EFF1113CDA922985E095249765989A4C6A92A76340DCFA07AFF34AC5E177
09B739A72D0D1EAE1A6164F3AA0DF1651EFED335B68C8465E1A61025235D4A5A
C3661B9C0456C35C770242149B3B98A29784BF71030C7DBB2C13958E5CC263AE
FEAEB9FBA84E06D772E94A494B60E32AB8FF862E57175DB17F6162DFFED60EF2
D46FB78237E778C7321ED79FAC137945A46B2D90B778DA46308899577BC7844E
3E09303AB2DD1F64D58756DAD62ADE22C62DE6C9BDA77CB12B1FCE3374CFA442
E0CABC7C9AE699CD955077A7268FA0FD3FF5EEDE605990F0DF0078799F5CED44
6ABDB2E7D9214BECB8B2CBCF328F7F5B8F346B55C9BA5C785A252DA59602B6DF
186D23D5D90556EB52D7C0B44E4A9A189C180FA213E12E9838F0B2902779E289
3E2B7DF45A01F36D88C9CB814AE5D41064030D37393DDD7D5974C1A27EBEC064
B0403898996140AB14E6EF1B48D555A1C4DE29AD0C5D284988B92917442D2C61
3B15E55CD91837B0496FEBB51486CEA7DFD9787AEB484BE887111903124340C0
EB034A75292E59CC038E75E1DDB0027407492EEF92D70E0303BD7B2703E131FE
BA91B289003B7E5BF85D2E5E130CB37949AEE51EA57FD424402B0BEEDEDEB5C3
E23643F3100312F94C157C98939EA2312B11DE0A683D4018FFBA2864626C9449
0D656EB0C79246A7F5ACDF442A55C9188D8F3FA64A9B6BFACD8F81D7546E0CD4
3C5CC653CE9514306439AA2BD2FF2B965EA69A30331E8D65056D919476867463
97DAFADD16BF9366E95C7C4276093B639541F7AFC9AF745260685D84DD3095D4
1B925540372ABFB68CEF211D65756FE0E99733B5DB40D5A42016E8715208D4B0
7A120EEB34147BD179FAFA94D0880121D1C6B27F94965ECC1A93D1B73AC1B3B7
191B7B3CD4F2E0E52A3893255C4B3F1A70A0ED36DAD262538E02E8A227F6D6A1
8A047A91ED6409F1E0D9B40698C817918AA47B95A082E3394AC42DE93BF9CB28
68E63F3363FDCDB014E89990C50210750E8442D9555B0A796B243AB03190B2BD
57C39F233318B6474F1B3CCE31C21BEF68FF5E3F866789041910B1B11ACEB75F
146BB1A162AEFB268700C2DFBD9752BCF6F136ACAE815C0AA4147AA2CE61D282
1BA716B693E2F713D0653B17C9381DA86E1CFCDD1B1FB9A72ABDA1AB2BCAD30E
A4EAB601BE3F8EB95B32DCF5DD114683AA64E14F9A958D16CC6DAC7DC3ED651D
603959B0265FD36F8DA41F3173A708D88C73EEA1533CE48C2AB26B4DB7CFA662
A8A463CC178C31D342EF907B3B44751859F2BD510F1CA93D61AD39E8E5D7785D
D465C47F3EDFAC22DC2B5DD93B2F752EB5482E138A0A1E5CD62747E0F524E29C
A56E58A6BA543CB3AE051F4D90891B65712B63DB197E60275EAF5975007D09B7
95F916615F97C50D8FDCFB67F1B677DC5139E6F46ABA079AC552F27F507CAE8E
E5C04D31ECDD6CF5E8A447846375C1748651245EB9C780D87FFF162AEBCC9E0B
155B318CBF420DF0CFBAA5669C2DBC81B55B5042514B05B7B82FCC827E21462B
BC8F8FA96E2CC4441E07E0901EA72495013400453E49B7D243FEF528E4078AB6
49277EE77C81B9167D2EE1961AE265A8C01F7562ECDC47D9FEC391097474EF8E
54A5A7FE6C98A81ED29D42A3D54326219F638C92AF8A087607CA2A2A80CB1183
8571CD40199FBDB9D70AD83979C739F533359FB2DF0AC4AE3A0E9DFE735ADE9D
6E29B3F6DB9A5B11418E9C860EFDBCB0E49BB900BBCC85860100F1FFA5AC07B5
14F37C5AE5E1A35168BC48BA7012A297C7771789302AF44765A6DBCFDD418172
62DF3A4785385CC9D055A9B4FFF373041D9F5E9DA83BC1C5F3265E49BA624B82
F15BC17B135D8723324865A9CCDD2EF3A0F64C17914F9B238C946FBCABD92B30
AF90191996ABF2E4972AA9D0EF7B64AD0126D07714D4059CE032905BDF877D7C
3440C374D7B5D0073E13ECDF3DEF2938EAC1908CC60D0E5EF5F52AE8A1B0BD34
8A454CDA66E7340783A7152CCD74EAAD4112C7D70F3C867E140988BB610CCA20
F1BF5E3DA8097509CAB419E01CA47D449C50EB8FC6DBB75AE2C5312BBCC5CA91
86B221536517CAA6870429B65069FE3CBF3FFFB5631B57597E5C0C3E39199FF6
4DC35B155A759CBFAA96409BAFC7EDFF03D2671F0396641446605843CA4AA36A
15070DE52DDBFF487C5398CF7604DE843F32CAB26A96F8A9DCD03F3DCAA57E47
6F0D36CDA34B96B7F4986275D79A1BC1954D2BC0BE1509709E40FF23B84F8D65
3DE1D1D8A2AD94AE3DE202D62993EC4BC5AF66CE512EFFE7CF39028BCEC1667D
8782111D9D503BFA45E4960E6197D8CB5697B1662BD2D991532074AF5491DDC3
2EC52B4E5AF9B2DAA5D5E4CB644BED25DACC3F445E4C7D58A1E9737F4EC04A79
238E3578311D88EE6D067725C580A146FF150871FAB2B366B5AFE5CE3B386EF2
EFB540348505A1749BB34586851FB2FEDA92ECC395B618911E1D00B427251B05
15B9E42AC1F0F239827B938EAB8CD20FF9705F4D7FB5F5F911CED9EE8FDABE8B
3C3442DC3B716C3686E1B0573EAE3905C3964ACB336FA3C38B17F229EA10F036
ADDE7FA5CFC01FAAD33F75A125F52AD395C7DBD3AB6F2321D7B5B55F0ED237CC
61FA8278FFF9956C64B8ACBE357D4603CC4599BFA198AEC01E4F4AE047754C16
E155C8FD09C996D9B5EECDB243FA48B0CED1F0882103729EAECDDB9523D6BC22
0AA1545814579043F0DDA2D7F015E56C399EA3C644A15BA6B144361449609C40
A4986E00918A7B44BB06E7090F73FFBE4EE3E051121939EAB0349EE84715DE36
FB187C50AFD74C44C25BE4B7037466CD60F211FFD7044245159505196B0E181C
0177F14D0B486CDFB767708C171FE513AAFA2B60665CA55B1E5F9E0304B63666
3BF44EC4F5B7DA58891081F78B37BE8453E86AF3557B97D8B4969CCDE2DFD255
91FB4D9CD41E5F931751BDF7FC8C700C633470064C0BB00FE5745918A69CE430
D86FE46DEC014C019C06621B2EC6C3F196A8A5E1E613AD8B28A9D0B981C11A29
4AD11CD3A46D089F8EF7D8298971A5F9F6F139CA794AB4BF0AAB2D4D428A8E4D
B80EC134CC7CD74D3F08E7BC8AC5B1846E1E5DBFA97AE4DB885286C7D06B4CF8
948E889ED85E8703CB97D7AE19E1201EEA205157BEEFAA3E17B8BDDFD01BDB17
691010A662280C279942158F68BD351B235EA4EBE24D54C0055A19A3F230F353
77202A1D7BE371010624CB741D4BA2E690B33FE582D666E9788A3E3348A0E100
2843E0B2FDEE05DF75F4D49DFE2B69BE79E97DA1B3638289395444F1CF6CDAB5
5E6EEBB6F907807B913290C25D8AA546B121EA90DD113588011DBF01B7F88AA9
B9CA9731532478D3BA57786817C1D31D8C51C307D7F500F1B58C2CEC9594E5C4
E5E7239D90C8B5B4A81F95C048272A2C05EF0613463E4094E922F7326815EF3E
6E82D5A36840A76B1BB25185CD66B05FF2D140E0F22CFF73EB3F57732E935BA6
8C64BB6809E1B45089273527834789637621793414B6853A1C301612920E3F91
458D043CC1B6CDA271864FD4CCE585FDF025FAD217F975FC36FAF8B79A6551DE
AC3863E25DE972E2A4AD997E77A2C05A1A14152BCFDEAF40072A0AD952A3944B
AB12D66ED3C408DD104B8638D67417D2A95A87E226A03C28181047CF5BE58409
7D07D2529BF867BB61ACFD68F817BCA73815F787162614EB926563EE2F8629FA
6BEBC05465458A03C2A8673A3CFF7552855E082A7B5C2D4101A1B96449071485
279C1EC56610507DF786427B4E4D949BDC9127C2802451F3B21D60D5827E5B7D
0A683F4402725547EEBE27C38839876A3B1B7FE0D7107D6E2292631D1B9EFC79
87D05342972EEE2C413568BA971AF56A2D4D89C7C0D0120AD504D444655CFF3C
957D5EF19169401CAAA2C4C144FF87AC7DD3451A63CE796B8F6C600F913F55A5
A74B928AD676ED097740BDA578DA299F42CB7B7334BD2281E403129866031EEA
1219E7F9BBA230D049EEF401CEB412BF7FB58FB2F9B7D1E47F0D774956B803E2
872A7A5A38E5B7EC4A225C73522EFCE6E98E3EDA3BB402BC5BBBA209074BD2A8
C856290D01A092160E8FB0D9EF324776AD39D7016C63A500D0839E670009F4C0
20F033554B6B7CCAB7BF60494431E4F2755E4CD966ADC7A078D434FA59E5E49B
9903F4E722ED169CC3D0FADE874E3141CD47C69BAFA3183BEA4F37B388F4F48B
7D143D4B79CC5E701EEB350447D9600D39A7C03A25B5B8B6A5A7284A8DB4969C
CDE2C99C39EC07BD8559A45CB5AF23B849C1826713828F43DF265068950DDADF
3B584B90748657609A89008187BDE4286F95694D01760260274A23A41FA66A78
773902ADDAD18F98F045FF7D20AD20EB685C145D44237EDA272619EA9AB71497
DC8BBE9EEED31EA77C9410FE650C65A6CA71F0E72E7D83BBCC0A59DCEDA6399D
64A8F4865811A637838445D84D97204CA7A918DD476471A598D7536276C0F0D1
F0A88D8BCCA56409342C1FF678CFF90FC7B287C36CE682E1B200B54B2CCB12DB
D1DC9BB4E1CDE2B9B6BD4B80DC226E10FCF20A9E7878A16EDFF37FB874E4868B
A9F1C452EAA7126E81763A2DE2B502132046322BE26140F04FEB0E7167920679
FE8618E1AC5C03360AD3D8B5E913E1CF0C1BE9E446DFB050C3978165838278DD
23D17DFDC85DC7B168F173D0945D110976084CB27B6F8AB2D22410DB05BD345D
E4E38CC7EDCBAE36CCBAC590DA5C12D969D51B847A1460F4FAEE7D648818D26F
20FFE485D842C2088258F4F0B1FDCA46A7110645C25E3A31C4E6986C220985A5
DECCA30BAA3A4B5CE0152B8A9D68B1FD67F21050A87BDAE6B665036B9C73953A
11B16AA3285456220D09A03DCD8402C06A2BB18717B1AEA7594F748817176E12
87E685FE70E28C0382EAE8948A6E9FC2F46E2B70DAB208611DFD5A5D97D39CCA
8F9AD9A171DF53CAA6E3E5AE87257561BE15E3BB21779397A30AD4B22A1A1EBA
4B7235F59EEEC1FAB7294D521EC1E36723A4D7BA007DA4239C05F0E6DE546D5C
7A58CCD00F6AC96C20B7182CCCE3E5937D7A64F7CCD52A107BB8092D5F95A8A0
589B2DC542511DC89A0EEEF23E711C7444BDF95F64CF486F158CA162138A36DF
5400A5D03AE62A945373E95840F6D6C7BCCC4FE65382584A4DB36D23FBA6562E
1F3AFCDEF27AED61245EF880426B14B3DB5D9731039FB98F2F51094CD7D5EC78
1F8B03F07064CED40D139BD04C868B1E51A994731EDBA98E7D678A07F7AF6E56
92586848C58ABFEF378F5C1B4C3E20BA860BC7310B9AC48F2143B5495F9B3A35
85C9AD5AFEB23DF6376EE78BCCE054C8FAA925965E38EEA6F68CE1B5329D9DD4
DAB3F3342C6E6D9E0C70E63989DE8DD2D3C4C671233888ABF56C58F69D29A742
B5AF39EBF1092C2C4A906B872310DE0E83372B1C7F6E295D8DFFEFF960DC0F4D
83D7878BD8918B9BDFA17889D52AAF362B6162C07810672E23F66F8CF3BDBD6F
0E016C4FBC8CBAA796057A6B9BDE3233909694110279F81259A5E628FBDF6159
CA0CD6997EBD34C3038A02FA4B422A98AAF4297B998685D7080EAEBC22E27900
8B0178A75E5E52363A2E56507B3E44A6F9A9DD81886317A07B4823558D3690C9
8C722915FEFFED7F6CFF4E94DA744562835E29C97333CFE50D49A5EDB886F4D5
279DD9CD35C15656F9329CA06A0CE1BD5986784A910EC3DC7AB1A068C8ED4829
DDBC83091AAF21092234F614A6CA2C4A854B5049B5622BEBBA68AFC0AF9C6686
74555347CD055BB13B5CD7B5B6954A5794AFCFAF9AAA3682C7333564660E7C1A
8FB3DACF1ABACC3D68C26D07060C7D5B9AE9C9377A771C3BCD317F0ECE3CED11
C0438A29708D99A1F3C02E67AA1D7BB57AA7D8C64A2028349BDDD4BF6DB3139E
C1BB6D7D906699484EE2A5D83296BEE09644B62EB10658E06E4176C1E5E7BC4F
36F3454F2DE69F0C5B51FD5874F67287294399923B19A40CBCA4B580BCDA347A
9AFB7AE64C8E9070D5586086E6F42EDB8C0E9729649CDAF7C0337BE5E670DB9B
D5C038262B65603C1CB1BD00D4ECE2BDAE5B77A8A129DDD79DC7D080AA89B7D7
439A03568C2C826EF23C2ED7160B2F8F14C05F444E364DDE247748541CE7E265
1414B5A15E7152C6E9056B0CD43421D4AA5EBF1EC2CC70516F920F08B0CDC38C
DF480EEAF04D7F12638C9CF8DC4F827DB07256F4432345FCDA86CFCB637D04D8
931A81D2DC47674AB435738871A65422D3FD46DFAE9049F27DF0DE33A0E3207F
A6832153135BBE5A283CDFF46ABC74C78B3320EAB1E881E59E07C3134F3830B0
8216AAD3995D3F8F6CC988C73B2B7A5B79E81C6E8377FFBDAB29B4CB6317B118
84A437E14B0B213BE7ED610E9469405AB950965B2CFBD4CF0B3415BC9638771D
C2D8265D4FF0018FCD3851E645A82C179FB4995A337C0A854999E0D91EE8C98A
A9EB781A0DEAFAE1D666D2F5813BB2E79C232E5C96C686D414921DCF8EAD4C7D
06F79EF5078C77556346283940EAEE347B06F756A800FEB7656DC02597A674DB
6F8BAC8751BA046D7040B5BA0AC766522FF9657F71C7C89DC93E92000A00120F
301DE3ADB5D7D62B57E0824B9BBED388A5CF1B39B034AE2E44BE27CC0F5F0223
2A219166697692167403DC2083384A698551FBE48BEC89629820596FD569543E
75174901415C56DCBCA012694D671655AA84A8D8307B34066F1AC149C8B4BE3F
578F57A39B93DC454580C44B12D6D1BC653CCEACE809E5F3F7406B9F4A868D68
ED4C5C23D7B2497668D718621A94AF4938A16FDACFC6E3B216BB615324375050
24A7466E820435B11E93E91F673D609932BE884AA1CDB9D433A40D189A668498
A1B708DA358F56A1F2CE297C61D9AC19ABF79539914749E5DEE0FD0DC998F4D8
1A4CD93D0A06E68CC764308BCE69D4D53FB2F0AB742D7E9618321EE87EB1DEBF
14561A916C8D58B9C6AFE80D586F5FCAC3C6489038178E77B515108E48C7AF9A
AC9C3F93598A28CD03864C6A65659E8E6C782F50ECFBE2C27678ABF0978877FF
C685386DF9D9D8F51EB5AA618D2B3F63FC6A0D6107469DA479D540447D785235
2FBD6C4054C30D02DF3D2732031297F53AFC937F6CEEE01B2EF34D59FD0EBD21
854C5CAD32C59F6D8F843795472ABE1F73107C0F5A5B9274CFF2346E7627355D
5E7B3B3451C89DF5572F4E9BDCAF526425B34D71875B5109EE341F55C551DA50
31E2EC3BCB7A79CA3F737D3CC23200160C76E29B9A5740BCFA0355AFE7930076
1F621C801268E18B83A108068B8DB4ACF7079069AD73E37ACB779490900CB770
326BA14A6CB1E7FF537AB11F432809968CC441F418AD1A36075D948D487C55B3
C6FC12080681BC9685764E9348B28A29E6FA025EBE0C175AAA6CD60CE6E2417D
FAE5E146264FDFFE499FF7B6F04466BF3406D2AF6DE542862EB51614000D9B0F
0C630C2955964D0D808C8C65211DA05FF14547308FADEAD9A907B1944DBCAAE4
DAE093FAF4AE1AC91793F025C0F0C1E74DE7817154052436A369CF7F52E05841
5778334C75C7ADDF2B7C1D996C18E65366EC4F8F085AF9DE24D54FF213C73716
0C3ED2B13D7C5FAE0E37A7D49E1E998B40028842BDFDA9A64B8597E0DF403BCD
3BC89209CA609CA4ECCBD5B3D3DEB42906E8D29A0DCCEC0EAC0F616751A5A801
54B18B65CF2FBBAF772665D34DC4FF8622BD2C8863934F5050CBEB5C70A2F4B4
BD77CA70C99EA2F704B29C2A07C0C2C45BC8A9456AC9219759AD573D2FFFEA98
37AE128288A5BAA881C912FF7DC90F5E036BD17C3565CC3F9B622CBBD7FABF74
6C6489BE7ABD40B7E2ADBD1684E32AC1658A1F62E3B5EB6AC9BFD274D716B375
6A278062A5C207078A12B48551B1BD87CBCC7B24D939775DBFF6EE0629CECDA8
F0BB10D63A966C67E02AE57A1446A5C96A75F07BF1DEFD24EEC1BFF998C58952
2D9944DD1659C625A3228BD7E10830E70848F14D7BD81DC8CD0933DD1695E055
927FD2283C16014D4E93231B5ACDB65F13099C6D2C08118D5E22001B12502629
6449C5189605B536343C572C1FB2C3FEE5DC9C648DAB50E405044120BD7A194C
49E20D5F0C7914A721A8556E284FAC22D5F238B1059E52A8C18C14D50A64C3E4
3C8EAFFE8D191EC45F27F43EA56509AAC396DB9FC099BD3F51F3A1E976E8ECF0
FBD083503D1281BB1D75F2523D63045CCAF770D73E25E8B728E94E650027D0EA
6759D04F67A6A8D9D680E7F269D2D36609CE2D6580E0E2719AB427CB15F95542
63233EFC391270D526B8A97DFF5262F8FFEE92432FDDD49519FBED487390DFE9
B146764F3A4A20EE895FAD4D7A9DB338C0003D08B7B01599ED1FAE98A934ACDB
8BC872C697F36D9AB8BC28C45476FB0FA883752DCD2BAA3FB3177C4D51008AE0
D27F6A5B55299A4095B57D9EE9B6B6B64C26646B18A8E1C62B06BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/UniqueID 5000788 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 88 /X put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87ECE63E66D3B89874A87D810AC3FD1DD51A8F2B8CA0CF190BB83D95EFA2CCC3
A15B863ADE529E5DB9407FDE0D0EF8ADD3241D90E8850AB594214E7B9148DC23
3902D54DA503BA7424C639AD06CDE0AFD91F10BEB1BC41A7FEB9BF2AABEE4A58
025B1F47E53E0B124A48CB687FEC13BC7E4EA714492EF1070EC9528F0B40443D
DA9630D3B95B3EEA755FCC82AB39D51265EBDA0325A786428EFA99DCDFFEDB33
27BEA1BB7DF11D303554BA06AE21EE1677A753EF0DD44BB699392C72D0A2FA52
36A5A4FE299CFD234C91D2E66072AB4F115407CF6479483306E12ACF74C36A0A
4BF507F74E231EFCBDD4D1291893448CAEA6D097A5127DFD9E07EF6ADAB2D0A9
A9E39661AC586B924810AA52A1F23C34E4D3AA860226603D6AD584ED66E40D0E
E77A1F4BA087E7E5E9DDC495F082A6DF3D9370B57526934B1EAC2BF2D49E4730
D55851D0844A473A4BDD0FA567FB66A67AB2E9018A399FA535E357FD0796D30F
483ED5C4FB607D82ADC00CE5B521CA0137E9224C4133739E2761CFBCD195170D
910B26EDD53926FE82992FF2802E3A2F18BF4FBCA920BCAD87F68AFC4596DA51
5B4EBE13E39440509F1F0634288E97C143576DAA5C976BF6CC88EE59B859A180
257E384EB63B66FBEE3F13B72996D897F06407F3EEDB906A4DAF8959E43A4DFE
37ACD550A8502296281BF8389F3EE97CBADEB0F3292A8AD10879BA6D0F981DA6
6330198268D72BDA54BB07F10E673CF828707908DAF845347FF235C3E3CDB124
62DAD3DF272CDEC4D2A48A37DD965FFEB3A8603D377F62D1245A6F85A386DC27
8C8FF261976EA639E6A4A19D50C9DAE7D3BCC9295C19A93B4D1A53034AB0973A
5BD73573B74BF4FCD7529249E5B6BCE1A04ECFCBF41C4E3ECB9BA25E86212F60
D1F0737F53D4EB7DD0B77FF8755EBFC727E85F08BE8AB30233E8396ED168B97E
5661F924DE93B118DD4AACB0AB8947BFE846C72C25137637A908A010FFD5863B
735302D77CA448B9443497677D3AA3095BAB7088C5CFDBDF4163B0E9AEBFC765
9B067C595D3B1783A8746B27167563BF048F60D545AB423632758580D9D70A66
9DB1A93300BFE5A62F0A98E1B846CA55A10AF242B8FCEA38F78AA3CED1F8B65F
5C788EB32582BCA5D594F5B7B7ACBF103C78E5507EF0C9CF0C763FDD4CBEB2F9
AB6234A3DE3A025C60715BB7EF61B50924E5AAFB124A9FDD2FD8F801685A65E0
B5A82B658FD1267CAF01B90267CFBEE1D02F1EAFB2395DBDCB2A2808B194FDEC
EE71B988F40AD6285CCF386401742A5EBA5322454C6A9CBBF205E41D94FF2065
B94F55C2138D240567B5F20C7ADF464522A75E5A62CC8E1B2253B9E86B6FC208
2319A3707D4167EEBA3FB4E8EC67BF200268A0D19045F897C68FB7E243422B02
B16FCBC5FBA26AFFC507EFC8450CE3579AA8E9AD37B1670472834087BF7C9D21
124839DE2AF2816C0795E4BCA1D1495C677B75940CEFA79D24A553768DB2FF30
F1A5020EAB1D52D67A527D272FCEB20C397A9C7156B91DB0F466121664CC081B
4852FC95BEDD733ECDF60AF8927BBA18FAE5AF57F5A06CF655677C404E87E224
AE07400A3AE10AF7F6D5E27B59391DC6503DB904066863088568CF4CB2A40E21
DD9FA88CC6419C62E31020540684F578E3B565C357DE9409474918BFD55FECB9
640288452E2D3F83ECDBD1316462FA320545A2B8BD8172F30646D5F252723C87
01A12B21AD88A0A0417B75BBFE8AF8331534DECDABBA2E9064453A65D2C9EC0A
1587F8BD23D05183E3D64E88159F57196A5C9C3F79BAEBB3ADBECA90286FBEA6
E64D55D83C06A5650AB1F21BD76BE91D9604E6891C1E9B8D545EB8EB50282C92
03BF2D759D3D6496D0E311CB76DC5D05BCE4473F086EF12CA93C0B36EC527080
BF7E71738BAD16629E9B641BDC43AEDC832422E8DDAF05396FCC2DB009EF1D1F
6656EDBE47360FE1326B5766A3DAF9330C3F397161E994F4A9A5612FCE68FA47
D4FB8F4849729B9393669D22AF8D255956BBAF7F51D2CE1D51E2803E926B9D79
9A4A9C4100DD6116364F6521EB53762C0A6A89682BFD4ADCBD3623A26AC1F898
791388C0E7104C2F49A128088727741052DD2F6D0309E32103751124AFE3722A
3EFF6AE8AABC94F09F6ABDAB9249AE3098BD2E085F87EDAE3739427047137690
39FC4EED68FEB0204C9A13962CD42830246C12B866A788D2098D50196B4A8DBE
912DFCF526F7A0148C40B33CD39AEFF31005A319566A5F78A85DB8B2A7AA7C20
29D3FCD52E2D35FE08BA36C9624720F427D005264365376DF5FD1D4BD355563E
86465B600FCE4590289D793FF77A0ED3FBA10993554271FE4B5D807600DE7C95
2593AD2EF7CF6103E545186D07D3E6B3D3857429CA53DC81D99527125DE002B9
A06233D01B56FBE2CD09C14C0B53542BF3197EE00E1C5A261815A97B7C84C3E1
0233F29E8C553723D2BA84B471EDE11AC94DE425D6018EFDCE88A877F167CD67
01C0486964B1EDD8D90B535E37F2921786D5FE0C29791CFC817487E494EBC7EE
3A340BB75A64622EDFA8E6EDE9A481478900373E4655DB05DA2D82CA28376506
2E1304B0EF454F209870498AEFECAC06842C86B5147254416CC29C9BC160021C
C96497FE4605CFE773E950ED5419F7228AC38E97189FADEC9D665343012C3C88
E65CB81B5CFC77D621911B58DE6FB9FE6F98DD2FD300C3F249DC42F0C618BB21
05D49D59D67E2FFD3218887D32CE8882AD6AB9C11FCFBDE3E26B818109273162
21A2E4A2C6CBEB79A209D5211009199C31C64D6B5AB50F3D937C96BD3A696020
4815697A5F571DAC3D493AF3940F45E4640A9EA92B2317048E0F25E0F616FDFF
EF9B511FB744A903FC89E42FFE3CF851302B17EFC48C38E03EC2D810C45ED7AB
DC0DC93CC6E84752AD41B39FBF3067B327601606A629B2334011380EEB857F1B
4F4775F1AC09F33BF384FF4AB015431D9607224951A2ADE783509E3B42AAD0F1
95BC5019183143973206ECE8F5988BE7A76E3EAAC621E8C3A0F56FCB43E6FB86
922E86797B8810195FE82EB7BE06330A4279AB0EFDE8D7C92D0519955C311339
CD143569FCAF8BCBA2989900862560B753EE2484BF39F835CFDA487CBF314702
500EABFC4266192414AEDA36808533021E5B074EB6939BD35489BB0472937741
E7166EB6B99F9361CD585E1C3ECC3B8876DA596AAA5D98A552B4D307AAC85E7F
CAD2594C36E997C7E59E62D8573C477AB28ADCE96309DB4B9E6BA12B3D5607D2
76098E0154C662D8CD6E6B87D92331A4FE32569A707A03A8460A0A29D0613C34
5C863DCA8FBB0860E86C19F917C566462036A986387D8E96684E79A08DB0EF38
B3649B7459D735EB7E390841DBAD1856BA1C915E0F692E63CCBE101B771E1F25
8059AE417E5515BC174DC67AC93A48BA9890AB85DEE1B447B196AFA7281DE78F
555A65C73E57800CCA15DFE3AB59A012D70D5A3DD71EE59993F0C9A5AD235145
E9DF24D24A013A6B390A5AC9B30124B429741C94B64E25CAFBC3A7DCBB98716A
CFE06E96D1C00FC18B2888255F6AF5B175149C105AD964919CB6F5475DEC4F7A
42A09DC2397E7BE49B960ADD061E66C8D53F8F553A5D1A5F565DFA31FFD45AF6
F652879E55B8AC9F3C0D9D4217C17E40A18FAFFDAA34DE957D4B498F4B255CD1
C293B39072880494B68195AB8C09014AE12FD066AFEEBB2A04E1C415F12C50E6
E26CD40FEB6880F48962E5BCCDF910DA0051C50298B03D17A9ADEFF671056376
DA1B431CA4BABA690F773B82615F9583EEC2A4902DCEC4545A4FC782BA7D002E
E1004422EB6B8B4CCF28EF1F95FCB151594CD66B95890C5FFBE56444E24F6B43
46715A5279338192DED2D72897779FD019C6D7E929E6EB70F89981778D39D087
1784181F3296781761385E40800E789D8A0520F2E2181442DAC1C3232C6DFE6D
AE38BCC666BCFDB3B69A59D5056F89B664FCA2130DBE701D7A370A3B4D16DA5B
4AEA49E580404A9E8F78A9640FE6A4F9E1E731E27295CBAA41FF981920A77DD0
149A3AE46AE7BD1443EC4EE87F57AF98C259CE1E84F1F1928107E320FBCA6DF8
3CBE03B470401CCEA8C9F0177CF15FA7737524E6F801DB7AE035E710D72F6265
1ED180DD93E65C3E9AC6F52AB0DC97C265C11F01C8D0F2D49A8113578657C671
1B482291F8B50F083ECC1EF8D8131C7F3FD4EA9812518A0AF68200C808312477
F3629231A5D2F1E5BCF0E73865BF75596267647FCCA4FE12FFB9BB0A05255BC2
5E36E874F2CAE7584F6A7C25F252B0F8316CF78808BC31D783C4A98CBA9808A1
06F0B46A1F08210DA97F2598054387AE7F9F46DA572B7BC2F1C420CADFAF2B54
2744156385A5BDE0FB6276D510DBCA515F622664838D7BC22D141BF9C61F6170
4A1CBC47151DF51A51B1902F65EA433C6FA590B9E589CC117DA876AED5CF4383
8F9D3F2EB41BB294A457FE42B6D916E7C30EED4CEAB3BD92CFB8258390976F5F
647D46B96808A5426F5237408B77285594078D88F6F9F7ED28B8B43873EB0F2E
44B9670EFF021C968FE30D9BAEA2EF63586265798FA43F6CE3C0AEC106333118
09DDE46788BC9F564413F0EDD4D75AF2E0C86F2AEEF58727706D60D4D60B2383
5FCD12E08DAD1CF0E59F26ACE6C182BA217AA3455E8ACBCB958C04A6CC580F6A
7248C2D4EF6DB501D0D22F38236D0BC840D43556AFA467BBE35339565DD68336
873D04C60A4AA0E3973A77FE50731EF3630484D3AE688FE335C00D93FBE0FAF2
3816091013168FA2363CFF5C7D99FE36311B16EF5507CB136C7831CC66BD09EB
7F7B2348857F552849646AC5CA4D36D954ED72E852829F94BE456B0E67B8FE79
0851B1BE8489A03DB8325AB2ADEAA8DB1A60FAF6D528F49952CB54EB7C993F40
49468066BFF0853FF3DD3EA5159C0C33D8CB0B5EAE8027C5840127FED3B7AF7D
F814C65AB692A59C1ED86D6A5114C9E3934C25FF8EC71605473FA6E09458015D
DF44B6FF2C65432D8AEF5AE24663033BA03492E4C7FB1EE0C4E74D8769A3AA4A
CA38BA34F33F795E3229995C5A1E49CBE98FBEBA6353EBDA48599C4AB341A31E
2D456DA0864843F5F49C8D21CB14AC22453BE6E53B11EB44BC36F7970EF34720
6C072EF4701514E57E9EF2AF79B882E32465442C6618688A49DC0E51DBFAEF69
4FEEE38184429EF530556C46DD339C9421BB1D17CC561D2B6D4E11ABFAF291FF
3973C14F9D2D02FE068B5C206044F3C81C27A24CAC01BA07304131BEBA813567
FF443393AC5F857A7ADF98A1E3657FB8527B73578839EC29472B7409291C806F
D5727D7B2075E3B008DA8A2834952E59FA144CB3A3021CB9421DE1DD7BC52D54
1D59AF550EF3D066A458522A0682C237580DEB9A034B7C63F5925A7B1C0F4A46
327BE4C8B4579E2F38F0D72F36A29050A29BC7D2A8858F30B96961B74DA87219
DA8D6CD91DC7824050CBB8AA0DDD5BF6FCF6F761EB6328A37AD3E2B31056F217
B25C173988632CD2D48E24DFF285FB75C553EA77D960E7D671756C6015F2C29F
16A4CBBC27AEBA4C2F74C92A89EE48B717B1448227BCAD62A01A80DD0AC734D0
1549FEAF8759E7C5CAFB9BB82B71C672E77108AF0C560A96D7D55E944DBD9996
FE7EEF5CA93ADE11BE0D9C84777ABD3CEDB735F583B5E61AE5D4DEF9ED17F56F
10BAC7C067A1ACC8352564F2D95382454AC02AB684A3F1A8A025AED693F426C7
1E04AE0E6B957E35F5C4545B7A774A4CE750C043A773AF24D0DF26F40E96B7B7
05A63CE63D1E91AD54984598F2ADA10820A24E36969CF5319DF0EA9F67A3307E
53002413A0F65548A1A597848D39BA10D740DE20C26D851BA781AF067AA9BB7C
FA9163316053FA6FAD6A87BCDC17344E7CA18C61EF26D611F46A55F11302B5B7
76EF210DEA79BE199C866FC0AE72E7815022EB31059A13AB4C1FDF2E19BA3536
E723C6A6C35B09B307967261D4DB19F66FF9FA13FBD447A5CFACE59EDA94D35C
5E566B49EC51D33E1A7A33BC2F65D205C5353CA0EEEF4075A5B53D0B1C94763A
DFFB1605A46D156FAECC6A1F68A6E3C62D9111403D181D6F731D8E1C9EBF5992
1B26A9DAF6D005B97FF4D6F2436D94EC3737B2CED29EAE67A12B7C27502E1968
297833C0FCBF672F771C2E6F771CBBF20488207B69663673F5FC3D4E2B12FFD5
83FF5116D49F90835667D6DC0F41F9963FF0CC1662AF2F9542A25203FF5A30C0
9E1B7419668F2E240A2FB6CABE034A41ED694CD4CFB9509FA4E638BC1B49096C
67D508AE64A9AF49F87AF970D759785E9C4EE830E734FD7FFBBEEEEBE2BA2AC7
87D6B404FCEE3E572429FC1A003859F382CBE6321A00F9131978AEA0F9AFA536
BA2B124A8641CF0A8C29D2DAD9CF77D140C44532EA5D0B76391E01ACEFC60AEA
388C27B1E7D0B9546D9AB26FF4FBB8612DEB9FE8E78F81E27FFB391DD24F3E62
770AE1E20A10C2C10FD310A813C02EA4CFB3A99644F5BF61432A3225630C889F
FEFE9AF67971C060F015272553410E52F08DB8AC1F82C9904A080231B60466AE
D300EA5D32E76FBD9F865335AF190FE5D39869292D0B712C5D3618052E28263C
5D2D0C250870BBEB9CBDFDDB2A45B8B4ED0292AF329E178746C9B082FBD1A04D
A1B73A314A6DDC1BA4A84F7B70848743349073438EF7B4EABAFD2E5C0EC7EDC9
818ADFBE3E1A95545D47CE01F4A182A9CB9F6BB927302940766F719A11647BAF
07A5BBB6E5B40330E0982C4253B7E3DB82B61401A1E2600C98A6CBF2A29F13CA
056954950C290C48FB0FA0EAFCD361D1ABF72D1830AAC678448734C7ED395832
34D84C80E010AD48BF4847C2C7E51527B127B4A811C50D65FC63B422A5D9CB82
AEDF5D6B4885217F13300DFE1C5BF6E0282BF1933E38E63FDF9EFB09DFA31B1C
EFA121C1BCEBBEFFB457433C14B1B889F2AC13A6A623ED27928CE6887CA14CCE
6F575DE243CC763E5E9CF7B370518302206E1FE6B94ED7CE9594661BBC66BE25
7BDEE9AF8EE4B028E20D37D4E54ED2B307C94A8BC01B49B7C25A716FDED64FDC
64D57EEA20C61755142496AEFD83D39C8238E8A747FAE1A5302B9279BF38C72A
3F14BD1FDB84D3028720838C1D037B9720797EE0BB602FF39E31D22CBB5FDEB2
44DAF734DF9DA72FF898514623694C55233101EFAB951137A5E2E99C1168FD2C
604D47D19A86FE9C367D9A10052FF4904AB042610E225D7CCCE525B611D86E01
78C9660782EA3AF6C7FCB0C69B813C26CB9620CD3A6974A9483E6EFDF5764B5E
E8C4EA61092323163374B1CC70BF69876C9613A140F6E8A33CC915D22D8650D4
CC834919FD876AD0E081ACB0EFD3629B003245FD5113012D9439167C3AEEF040
70F7C83548C4EE62ACB573AA6191AE0E4CDA4B97735B355632AEB6398DC72408
7DBAEBB8BAF9F986DEC9B02694263C13DACC214BEC0FAD22CA97F00D6C2C09B3
EBDE1F39857418F81E519DAA7DC06001D26E3BD8C61C07C3EEC4E8E99543F1ED
B2EE0ADE67FF6168B74E2261A1B0A1661FC668BE44866968FAD15BBB72466141
410BC52593A774355ED3D50F56488551FD82386B3FD2F2753FDF38A04500F661
F538630608AD1FDA2B215CABA21A6E1F0CA57AB23C75B3DEEDF456B2B52F7512
3BE394CF832288642CD039736B8C57C7559D4C2645680D28C8EA765C8FB9E719
9E43AFBF8C81129FDFED7C8BFEB206E8BC22C2C00A34C7076EC6D511529AABBF
03BB7A4359D84C10ADD159FF387D12C64CEB559BCAB867CF2D3F12E5E7326D98
85C2D5EC98329585CC386EED53CE20B085508FD5701472A151CF35FE9D4FCF49
0ED48F478BBC7FC8B20600125BF3770C9CE960AE7BBD8CCFF57051180EF76C80
D58CE34731439B09F2B09007CD5D012370EC9A5C46B4C83C38B1EB5D9699D1F6
69A0A9E30A9E72917B03BC922772E32A4C38702164F45755D70240A71B581E35
C78B8EE456DADD7C488C8E9AAD3C311B8054F741B57E4D7DD76C73009E7A5ABA
2257E904FBE090D26BDCF7503BD2859758C3BB2DDB5AEFA4DCB9F84F923282DF
9A522144453AF0AA29D666085985C6381E15163A9277E0C5529F23F2A36FBDE0
78819E83BFEE896FEB496B9D6346297A0BDBE1180D024E2654EC6182B9CF854B
0D31136915C1167D596343A5D109D888A949C76C92F1BC9037E46D6F785B419E
922DDB11A54D60CA2C6E315E01D5D95D8D6B404F1A7304E93490D2634811AB51
433182BFA91D95336C53FA617EC9E0646D7ECB37AC51742312E408A0BB6B7497
6C1E8D1BEF9AD4A8A827D33392B0AB49965C607640143B5A96E99C8AE97CF87A
80ED79CCF03E21DB421767B2FC04B4083819BD53D2681E4BBFCE1485F0A951F9
AB38C5B8E3EF4EAAE973607149F028589AA844D5E23F9522B7C090A4A8AA0929
3D3643DD729C905DD3ACA4169021821C822ED4773DEE2AB536B4B4A48C733206
41C78132F259F36110AF07AB697C1A78991054D143113232808E4A4EECD8C494
FA9A250A1CBF0D11171F207A6CA8BBCCABEF0197CFD5BD673B1A4776C235EAF7
3D43886D56070A26CB4157497E8EB659825BA660A2C906504059AC07CAA3BE5F
DCDC41DDEE1B8CAAD66BCF7614B7772F48A1EE24F2F6D7BB2A89CDAF8B17E9C9
0D523D1BD983087D08539E180567D6FD94A0018BA2DC3BDEB146D972EE4C7600
A20A1AF0D448071F4FBBE54DE3B1AB40EE3B3AB19D1ACCFE51A091C2A176685B
C5E9E12458A6E66DC13A127E9E28BA12E1A2BF470EDFA288203A6AFD661B840A
60DECE4C0B890E4E8A7796B88A4F5F53B4866C7C258030D2E5C2D9A18FCD0A31
BA324D6A8B038D3A2FD1A6D025D55D70AFCCC007E4D0C8EF2D980793B89068DC
B6E622DC68ED1CD5429AA13E8848379CA802F8EAC160572D0CC559B47D12C919
D589989AB922DA1CC0989601F0DF7B4125370B20AAD4CA36AEEFC088E8648702
9DAA0776578B5BEF706A4941B299FADE50A7D8E14FEEB163B66B719225FB1C06
CB28950C3477E6AECC72E7270C6A62DD7C1D59E88127C87FB9A6DABFA70EBE15
3B4FEDB314409AE1824269579580C782C55ED936EC850ED97052131DD4A353B5
C64B47682194D31CFD87E0E4E083EE14EE6B88FB8BEF3328373C457C06D3A860
F8FB751E59035399A503B530208A622EAF792E730492C0C3E62A178F198C86DB
6C03DD8BB11AE531176453D8AFE01293AE64B81B093B9B12568033962C0A6E87
B5D8AE37FBBB22B82088EF288124C032DE4247C3E1C5268900406DB432A62551
5E859F6B14F9707974FDE83A0D4174F9BC7750DB5D8D65B327467040F0956BE8
DD8B66401FB8056F3690426D3AFDDC80E445B54C286CEC4CF7BF5B4EF203B6A6
3B1F7853B73BB06C33F7273ADF88921A8DF0FD925B3AEC132A764A75DCFC9DCD
260E965782AA60782F7C7D96D0790DDCAD4C6533BC20CDC990078CE76A8912CE
4A49459D1EFF54A866069D3EB6151DD5FD92BC3BF68BB5C3219B1589C9C6E59C
ABB3936D29019B7F424F66F5E2E8632CBEAB21A574D3CD1578224BD83FDA247B
37D694D79759904984D121F393286855823B61CC956E5AA424339FB18F03F892
3AC7004607BEA51CC9F34F75B499321EE1004031F42A36F37E4D5101BAD4DE66
B92B354B73BF1497BB718FA72C56BD69D2968D10D198DC36D9331E60BF825B1D
D6CFA29C58976F94434C1FB75C1851FC92AACCD3F44ED750FA64B81A5AB7CB94
290A314C45EC019F5DDBD3121CA450354186E549FCF2BFF42C53D5255B212A55
34DB3BCAE94676C141CEDAD9FEC623A09D7F21C78590A9184E01D5985DCE1BF7
B4343540A1415825B2092278C11591043927DA8BBCC6ACFFBC4DC25473E35C53
665D3B64B3A6DA14777D840018C60D808F90864CDAB555CBEBFEA8EA0BED6035
6E38A8A3EA7CB49D974EBCB96CE67468ED16D186264023AD1158ACCA1F68F72A
B827BD367B8084611896CA3E89B7DF6F4167C482A071689283A36F82A36323F6
9E6152FD2AC47880A5EED48768E4A38CB45FAC15AB0F1ED92854FB49883CA1F3
CA7D373F47ABFCFC02A60476CCEF940D8632F29E2AF1D805A7012EAB6D9DB227
3BF00B28E5EC57074EB16651E2B13470DA91FA5346E37A48EA838D9C1F50DC11
1E460FD7FDD504526AB48EC497933C6376B900C9EA7A0D0730E35BA4D6FD8F50
82B2A4B02F87FED2313ACA2CB821D27D259605E5B2AF19A4127E0B8192F37463
DF15E7343A849581D73AEF6B6059C7F2255452579D6B9903D9C914B968BC17D7
82689226544A62EEED6E03B86B6F567DE78F963674261CAE7DCDF0A52FF97826
5F286D006272EDB79791302B11E4D04273D36AAF26C2A0A7085465B21B2390C7
83769785AE0156DB466B09E0163AA7457AF71D424FB38417AB3C63613C82A2E2
F087BDC73A31C2FE2A3C790BB73A1F75633ADDF98B3B6F4AD1377D3179A860E1
FE52FB422EBB5C2C931A8B2161C3C83C2B9A98AC14AAF6AF19CE11BCDD695DF7
DD5119D5FFBDFDD0C2DDD8202F9038E6E87B556EFC7675A014B53657FC728FCA
C0ADBD93DE055D99C7ECCF3BEA44100C3E260832ABB90937F31E3C1B5103B408
43DC250E37D1BBB181F75C29E7FC033C5652C4AF77D356871E3FB84EB9067DF1
A45FB6FB3A62D0C6A855C62DAC7B630BA17E55E7947508201E16D06DF9D3393D
929AE1B47C54828CBBEA0E5B04D327FD9D0D26F4096716117C95CA2CE1882454
5B0161C7F068FC59BC41418A185135D865D49FD6782A134FD9E2AA3A70B72655
3EC5C8B0D07F30DA31D562FD271D73285E241D95E6072626B89EC43778F45545
0F6CDF00BE0629C653DEF5404587794417313A94ABA9B4D72B81A2A878CDAFD2
63942DF7592A9827E67BEA773332A9086EC05233CA994FBF0BF7E533BE302119
DD907E29D7410C348B20E0502CC89B68707211BD0402D7319AD003B7E7A173C6
EE5C07A2EBFDC5B71DBCF1EEFCA080253DF744406E03CA5F52A86D8EFCE9F03D
A68038B3A72D599A27C0EED6EEAC35879683F416C3200BDFD15370A8C7E4D7DA
C0B92C82AF8D3D899D7503032ACFD1B4E5C25AE7610010E14B0A0CF8C359B623
61ACAEF854E06D0AEDEA0E10A04763181C091D38AAEB2B75B1AB417D6620F537
6DAEE11864F50ABEDA15F20273961EA812C259863FE8EC9674F52DCF0A7729E8
3259BF7AB6BF19ABA24503970FFEC53F14DC9FEB56C4325F173385CE3E2AD13F
0E7A5C4BC34DDB68C646EDF3D31A2206F6387AEC8980C5D170BA2EF833A6AB5D
7AEF613D91D49D87B6179C4E6DED8FE8CBC1522ED87535FB21AC90A5DA3ABA11
BCBC6E4D445143EC0851FFEF26DD22EB69AECBDFCA975A214DB406A3B096F9C0
04BBC2735BC23A7E088685620B12F89DD91967AB620EE152ADFFF607B3EB5228
98035F89A461056D5F173D7974A078352761B5EC54AB4774918A190FCE807B41
C23F723B155555A83F60CEBA3B222BBA3F6587E42616667034C6A6CAD1809020
5868B81FDEC86D66F2086FE31AADB2F9CB8DA2181A315F15C013DAACF139437C
492E8CE62E3096340261FA79FF824DF8950F1DC83089750BE5BD6543BE6F4564
5EA56D8BA39FFED76A457586B0F02DB7FAC6C289C5D2C6B399039B9D32173925
943B06CDBF2206228DC8FB7B444B9E264AD11642AE08F3FADCBD88D28983AB9E
7C74968106CFBA2C4E181D03CA6561F961BE27B3804C4520C0C1BC8AF601BB87
AC59C5EF68569814AD471AD2EB63B68BEF0255382882CDE6A3BB979D3309F85B
29A31EB70864FDC94520136CD1F4C6918EEEF0603F7F52BCDD154D09D0B9E4E0
A4C6D0F70165A8DB7B3E80EE6AB9A180BAF8AB10F98D04EE791E88B3949EB8EF
A1E29387F6A0031E6AAD68A05B327E3BD24074E9A70101AF6FC37765421709B1
94F50DCBE5DD75C646CF72698074456E93B31828812CF1D1C9C694F37FA4590B
DA3EFD46071472DD61509AE2F158A2D813F9A2E5A052E79FDC4F5A3DED03B616
4D83C4D30FA53F6D5D3DAFBB430FF8EB99AD72A346CA1EEDC0557975A362F4A0
3FBB1DB2AEFEF28DC5B6243E75BB7B123B95A3925083F3BAACE77EED31A40A57
4F0EA17693F15AB33374BAE21A5E518F58B12F96A741BFEA7544DAE6F1235E4F
B9328B9109E61682CB1E9DBF65C598CEA776CD0A5D893DA816D3095F059F5382
591E441178D82D3E86018BBE2131F2D8AB68C57EA91CDFC1EAF8F5919A2893BA
D39B412B6F3ED4502BAFB4CB870ED922B171113B93978A8BE2C09844CC7CCAD9
6185B67A07A9A85392E9DC1882A4081D778FED34A6440931442ED594A527A6ED
6266C4458FA73ADBF38590622A4EDEF498D98025FA2784323BBC4154AB0D945F
1E1977967677917C2EBDB8571C49078E65582BFDEF90BEAF0D3C81D7D4827434
F0FF582243ECFF0F32B3A805479511492FED0E63F90B8DF697236CA7CC7532BE
46E975213F1B22927D0415210C97CEE4886D79C5FD81F0DF4C897EBFBF3E0420
2DAB0C580E883E0FEC5CDE8F6E8D3E08338C75B76B3E3F3BAA848C6E601D5D75
6BEC135930D9DF0C240F7C0EFD22BB95776697DAE49333B4945C307DEAFF805C
3B199DD49E22EC5244868DBA25F0233BB7210133F1BE1F1DDE9106E91B8D869C
4425A676927300A798C5D18C93C08A76D6AAC958670777A18121FF4031F39B28
471E1B4ADA24CEF5630D8C8C79AAAD5144D7C38EEFB24E09551C58F0EDA07B91
0780BEC611567857D75F8BC21F88CE75CB883FA003125A75B4BD514AEF4D9168
90E6335453FE2F494A0BA00DFE1C819768B1C02C6E25491E3B38A5FBCABD557C
CEB73B2C21FF61A1D9CE6346B4E1B659AD53527441D6FC414B1601536599B73B
C15216F4A22B590B9F0FAAD50D10F539437E40E0027F34DEBD0087C1AEF412C3
1F569577F4D1528F87BBCEB06A9351FE62FA057EED27C2488CAA346C280903B3
0ABAA08FAF43DEA736A4B1A29C0D1B29B1D6CBD8B1C9C232532C3BE32D5818B3
409FB8740651DC48024F9AB9EA367998E2EB24435CDB2A3D35D41DD4CC3CE592
D6B5F9E58972477C4CBAEC927F443B7B1AEAED0163D80EB1F7785C556DB0321E
58CB71EC6EE633929A27F518D4875A5AE537C57E606029480A6CC679ABACF64F
1854DCAB0FEF3BC1F6A5F38E4D862D63E558516DCEAA00126AEC6B42634CAD53
C7F1DD4174B0A8C72A0933459F4B027EE98ACE3DE8F7D07633272222F60C6C6A
7B91F845D48D4A4CB9568AA9C68C085E87655423AD55F7C49415A921368F613B
483A101AA07CA58B3031997F1023CDBE9EA20213780FE4F315B20D3E035B73BB
B7592E266107F1763699F3A8C7A1DE4B4E0D1CADE92F1910778117BC5CD9C066
7CACA6B7100AA4FB444819ABF6B85DE810B0A73BE7ECBFD00074B4A864220A9C
A6A58B952B4215621237EF592203A5A40A3DB85F2DEABDC474993E2A913FE260
48E9DF73EF4CDC074F3839CE0DC846497506BF1E06EFF093E340847F7053AAFC
DC6E430D053F214244B6B2F9D68F80CC2DBC238C27FD7C1CB59093B26B02DBDB
195EFD909AE9523AA6DBBB52BC43F89564B65E67FA692802D0747F6D8A0FB360
9061D144BA78D65649DE59A25DFA5D2C91A2B5888C70C60F4D03FC4CE38534B6
230C822EAAA89B3471462228C624C0C19F2F8C31C6D54CDDD9DF43913D250735
13996159FBC3BE46EAB521C31DAE2379C5D4186DC07CB5852ED90DF8B3DBE235
0EBD6189CA59D29C99A0FF6E86BFB6D24060BB4C006E141302BB40219960BE63
83F028F03B4CCC2B23CC3E792975175268013D3A3FB1EDB5A5AFF79F9745AC3C
1BBAAAECAD3141E4EC1067FD966BDC27555760A68872C7C6C0620C6557D31FE5
21CFDDF8770D977C89DADDF9C48734C51DABEE21E888978AA66BC61ABC6C5AAE
849A5B9914ED6CBC83FF970E2E0725C18E0C0AA0DD7C85D7A82DCAB9B432E800
FE21C7F0AE14F3103B3B5FCABC03834C9E657A75A0CCAA9D36EEBA57369018F9
0244A5FAB336FB7AF9A80D168ED21D16315196D1BCDC88CBDCB4126DAA9A5143
04718F733AA8D7E04B6340E6BDC904F1928AD0941194577F3DE3588306FD42D9
F316943534266BE05FA20AEB3CC0314011687F17C0FDB5110AFC0B1A8E95EA0C
B2C3C610EE1306BC58EB8467D2FF0E31F29F0C89D37F95756EAAE6152C974098
382E3162248E4ABC866C363BFF2DE31AEC459A979711DCDA46965EEADCCCED69
D978B488B31A0FEBBD75EF1E862605F7D549EF31E23785D8A71D1103FB65D9A3
735D50B1294E7AF45E6FCC335D3CC854329423F0AB99DC69B32D5806CE0731F3
A7DFB2CF9523DD4D88CEAFB75E0CB34D4CA504D6A5B2D11BF3E2E04D677CE41C
D5822B2CB32885A95677AEDA7E6D05DA84CA125A08A8DE68CCAE80B0FFF8A831
0836C0665A42B8EB95202BE56CFFC40A46E4C247BA4F63A55F47A847AFC6C6C3
6F863B2FD07C1E57B7385B8746779715ED2D976ECE5C9FA3F28C53F3F3CD7B7E
66549F054ECF08AB3BAD20A7AEE18DAB9BD58A6619A3FCDD74ED483BC214155C
A1685CE5D7FA48D4C6972C11A2E3777FB7F0FD6A4FAD9A67EEF12607AD8BDE8B
D891636DDFB622CFAEE5FFAA0CEAB6DB8E9719F2E8B3ED924ACDC9D10E065DFE
3560AC88696053C07EB3EA2CEFD267723C863A26156661F0B0D1E5B0D40275EF
AD5A9A60F8AE80CB879093399FBBCAD59942703BB5F864A8C33E6155E7435548
DCF66B6ECAF7F2111DA85CCDC1A809C78A07D5463DA6F7312129B3950A3E2354
8F1692125A1B7C2F5B0EE46A583E2640806ED92AA8BB5E7A38C14DA5BAD4470C
4A7C2A18DA4B1A0C5716771B815B966A2F82D2AC73FAF34445532AAFC08E3089
1E7423438D3EE7F70193838F402C6567311144D8A63C6CCD7DF2B15EF62A969D
2DC1B082F631FCC3E8216BF015B1820A445D1D5C08DD89743A15C1CBD4C0717B
971C89F08CD13D135022D5A8DD38CFF97BEB58F13406A0C2530EF8E232900EE3
6AE0BED3D9D9B73E8884C4313FEABD024C71A4DCFBBDB659DAC591FFDD660D0D
0768B30744F6242BD6D781798A459B6FA2F2D4B6E4D772B6380A1BEA178FE2CB
8EED422C3D413702B13B7BEF4BCBD29F0F1080E61B574FB5A0B0C6AEDF30700D
3C291A3211D919C5AAA11A2B260E7AAF0352F847B4FBB3B2ABFE0248F4C46C18
CEDDB59A8A0B4CDE7A0DF74C0AAC3C49C4E2E448DADE19A446A15FE595BAA8B3
EF43FBCCE22AED637A9C013E7317B40B1DF0426D8E7B89B9E11A406D9C53C15D
023FE863E6CF573AF240D364DCBF728A7EB38EC991B3ADEF5BC7392C79DBA1D6
0AB85CD8FF6C860AF1C3E47A26BCA7D8FE19F5DF21D3550161B0E8CDF6286639
DA3CA471675C38C11BBEEFEB6AF8B887B9472AE941F68E60292357273877F375
988636FBB38A4A7D1D5DC21D044CF909C07065EAD5425D4EFA703029E76821A5
F1C123C3B18C8C97D23F16EB62277D6D3D7F93C18D057E43D6B922F6DAB3F286
EF92CBE16BD0ACC8AB38F025358CC4E6777357F25F37EBF0459B9A567C966F27
6977D9D26D9E11DB5E9D83C7C6EC7581AD81A19F11688A44DFE6C57FCD1B7E37
A0F9DF30429B2778BDF72ED15795015903057D8EA3A402115E019530A834AB82
5CF3CD2AD3D266BDDFFD4C7AAB60A4FF9CA03365AD6B42632729909AA456615A
62BA9B4D7B1820E508638A6C67D36F43974186E79461B1BB1A9AA6286C0C9DA1
9C15422F276F634B8BA4D63081D8D362248B339849F496D0C5E51E746EBB41F7
C846074DB655C96AEC68A495D77712BA46C8E1E8D30561EE5736822DEB2A64BC
4B9C5C31D8A38022C55C7C7350526E70C3124EE0B9807E0FF63C399631104408
FCDBD54E2DE87A9885C4DE2B412E417458B9CE4C688E25C1E21D5BE8F34EAF60
DC1FCB2D9A48E565D2ACC3D2F9D1AB78D30C74CAA3F18FD9953D5C578ED40273
A2E01558FCB1628A904543C103BEA7ABC952A8D628786664AA20BD892FDACB89
2095DB8FDF89DA619ADB75BCA722DABE4DC16035068CB2433DC5EEECC0C551FF
F7E80CFB10D785F40AADEFB1BAF9FDAE0C9C60EFD47D05A6BFEAAEAC47371EAA
9CCD9D1CA320D3316DEA0A72682B84995AF71F0C767C29C45975F785D605AD4E
3A7BCEA73A56CAE47E4AA67E4F61718BC840DCFDC83A2CFDE6C8467B99AC0FFE
C0E66287178698FB367343B4ED2FB0E3F73A4D0390561F805A162326F31CAF13
F8832D07DDC4B3EC07D95817F55C7FD6B124640C5C583A31D75176DC68F63B94
B1BF149A3026387222C71C3E177E0CB570DAB727B65620673D351D735B5D9C98
CDC00279869FB0CA2B12C04CE8414F184DFCC6488DFCC5A770C64E524A16F907
C2C7195BC0F2C4A5126F4AC5F199ED019291C64C0D0B14CDE92CCAC100CF71EE
98886651919DF48923BD1BD52733936DED84498A38C44DDB757FAE56AD256325
8E0A9821783A060B89E73DDD17B93843F8BAC59644ABC9084EB75DCB7B43B622
A7C64F4DADC23557F93BB6030FE976F99F076328D2D675CA6E5F73B8434BC749
828FC711D67ADD9B105F613019559CDF55736E28C3968E3A2621AA354C425AFD
630B1C4798A60E5D98D19368114A1A264FBF9DFDAEE16DE87CFA2287FA33DCF2
BBF21079069446BF0AC3D50D7EE7935C721A37ECBD060A0E76AC6AC13F422196
C853DE36AC07425A250566E9E004C287FBCF957AAA2819B9A7E4D5DE11971091
E2D542CFFAA5B246B6CFECCFB10BEF7E9AF754686F95F015B227F11FB286742C
BF0CA8C8A6F97064052548EA1E66C4F8B7F1321D004D956BB54E8CBB666F10B9
BBC5ED82AA6A2D863D9EEF63332CC4089C914FB3080AC7D34756F8ED208A21E8
9C1E95D2A6AC71551CC1D7B55824220D2D1737B47551F19465041DE0100C0AC0
61EE8F440DE177F49C4B71A1AADB840D0A763BDB6789CB39E2437A16F2E42361
827C0EB4646FDF431D2053373F9628CDC8E2105E5D0CE6BCDA4A9D2ACD145B4D
EC099150688665130005E2E9EC3D918C69D9E9B7732157837F45B65A7FCAC2A2
1FD51CA4EDC1F9F5190AB8C2D924E1D4329C897A85F0E45D98BDF12DC7D67185
C5A515D74CAC1CC6AE2A03C62C19B7076AE4634FE43454BC9EB1B909E010AC94
4BC0950E7E9C53BECA2637A8271EAECFDEC496A23428FAB10FEFAFFCE2FF142F
D2DB7EACEBAA66D2EC652681552E3ABD76A8A0C61FC9AE17DB865CDA862251FF
6D92C3799568D62BC9E437B8B3C2779A532F9CEAD32F33D5BF381EC7C8904E65
3CCAF04DC9B5CF05D0EECEEEC82B288CAA69665744968020F06E3F3A6F60EDBC
87995A6B4372608CADACBAD4A504B667D6E7983261897BC60A9138FA3CAE2464
4B398BBE68895E33DDD775669494307F3295F529A159816990F40FDB544B60E5
985E406903B3D9302868F34DACB05D2AE3127270775E03D410B40B7A423ED9CC
3F95EFFE5C1844E02A395C03348FE8EE59E2EF8A2ACE5F34AFF5EB545748FEF9
CA7B9FE8B63617B7C731A00AF6421C2C0CA3DB9526D06CBCE00B5E556B3A888C
137436211EB4F98AF892C6F91C7B598A0F839C5AB031F26A831F4DDCC57F1D71
2763AB84452E7FE7EF43E5288E56438EE91BC729CE2CA31FD073C8FEADA49961
F54D5590ED325CE1165B2541DE762FA4734EB842F09D7C340CD3F2CFA7AEDFAA
20B265B3761968558390E04BE6C3B1FBFCA2A0A6CB4F2CD6B6766A912F5B3346
277AE2AC7DA799E9B21A0E62BD7FA5C5314A8C93707E45C832D30719B8FF1C5C
D77E5C30A47366AE53234E13BB9492ABD4DC5CF2FCEB405C297A6BFC69723F65
CA68EDD068303E9637DF13EBE94E0B6AD74865C7B7C7A87BE21556F4769ADC68
ACA4A8C199905C0D93FE5E13688EC03B36C9CD2553B9E1FB8D938EF6F06E8813
E45AC71056E0A341E751AF8ECDD9241BA6A7C2E6C5ACB12F7199561F4D5766CF
F4BDB9B277515A22765DDCBCAA9BFA1438BDCD74C1E10E00056C6C88F3CA1FA3
9248BEBD142BC495362C80FF2DB9B418D8C447A20E57D23B1FC6E8146B7C2E33
DBEDA8D93563053E7B901086B08EBFFD96326936631CFA82722AB7442D1F6AC9
B59CB6FD39D10A903C2CC5B4B2AE0BC57BBD08B4211FC54EB11FE9ADAE92667E
92F354A2F614E6E7B614FD34E6FC786D460FC3BB2E9BFF4CE99D213836C6BB49
54C1E91B22505CACC1AF01F01A29
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(help-en.SaveFileLayout.dvi)
@start /Fa 135[51 2[54 38 38 38 1[54 49 54 81 27 51 1[27
54 49 30 43 54 43 54 49 8[73 2[73 70 54 2[66 2[89 61
1[50 35 3[66 1[70 8[27 12[33 5[27 39[{}34 99.6264 /CMR12
rf /Fb 145[31 6[31 31 102[{}3 41.511 /CMSY5 rf /Fc 133[25
30 30 40 30 31 22 23 22 1[31 28 31 46 17 30 18 17 31
28 18 25 31 25 31 28 3[17 1[17 1[41 41 1[41 41 40 31
40 1[37 2[49 34 1[29 21 2[36 37 42 40 39 41 43 27 43
43 43 17 17 28 28 28 28 28 28 28 28 28 28 28 17 20 17
2[22 22 2[46 28 46 28 34[{}72 41.511 /CMR5 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop
-32891 -32891 32891 32891 22003106 0 32631725
 0 0 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 185.79552 341.43127 185.79552 341.43127
259.7723 0.0 259.7723   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 0.69 0.93 0.93  setrgbcolor  1. .setopacityalpha  fill
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 57.75879 341.43127 57.75879 341.43127
178.68237 0.0 178.68237   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 0.56 0.93 0.56  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 0.0 341.43127 0.0 341.43127 50.64565
0.0 50.64565   /Lineto /lineto load def 0  setlinejoin false Polygon
 gsave 0.86 0.86 0.86  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 278.83554 341.43127 278.83554 341.43127
335.74075 0.0 335.74075   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 0.86 0.86 0.86  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 259.7723 341.43127 259.7723 341.43127
278.83554 0.0 278.83554   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 1 0.71 0.76  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 178.68237 341.43127 178.68237 341.43127
185.79552 0.0 185.79552   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 1 0.71 0.76  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 50.64565 341.43127 50.64565 341.43127
57.75879 0.0 57.75879   /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 1 0.71 0.76  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
0 0 1 TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb 12 -1442
a Fc(\045PST)l(ric)o(ks)19 b(con)o(ten)o(t-t)o(yp)q(e)i(\(pstric)o
(ks.st)o(y)e(pac)o(k)m(age)i(needed\))p 0 0 1 TeXcolorrgb
0.648 0.165 0.165 TeXcolorrgb 12 -1392 a(\045Add)e Fb(n)p
Fc(usepac)o(k)m(age)p Fb(f)p Fc(pstric)o(ks)p Fb(g)g
Fc(in)h(the)h(pream)o(ble)f(of)g(y)o(our)f(LaT)l(eX)h(file)p
0 0 1 TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb 12 -1342
a(\045Y)l(ou)f(can)h(rescale)h(the)g(whole)e(picture)j(\(to)f(80\045)e
(for)i(instance\))g(b)o(y)e(using)h(the)g(command)g Fb(n)p
Fc(def)p Fb(n)p Fc(JPicScale)p Fb(f)p Fc(0.8)p Fb(g)p
0 0 1 TeXcolorrgb 12 -1292 a(n)p Fc(ifx)p Fb(n)p Fc(JPicScale)p
Fb(n)p Fc(undefined)p Fb(n)p Fc(def)p Fb(n)p Fc(JPicScale)p
Fb(f)p Fc(1)p Fb(gn)p Fc(fi)12 -1242 y Fb(n)p Fc(psset)p
Fb(f)p Fc(unit=)p Fb(n)p Fc(JPicScale)g(mm)p Fb(g)12
-1192 y(n)p Fc(newrgb)q(color)p Fb(f)p Fc(userFillColour)p
Fb(gf)p Fc(0)h(0)f(0)p Fb(g)12 -1143 y(n)p Fc(psset)p
Fb(f)p Fc(linewidth=0.3,dotsep=1,hatc)o(h)o(width=0.3,hatc)o
(hsep=1.5,shado)o(wsize=1,dimen=middle)p Fb(g)12 -1093
y(n)p Fc(psset)p Fb(f)p Fc(dotsize=0.7)g(2.5,dotscale=1)h
(1,fillcolor=userFillColour)p Fb(g)12 -1043 y(n)p Fc(psset)p
Fb(f)p Fc(arro)o(wsize=1)f(2,arro)o(wlength=1,arro)o
(winset=0.25,tbarsize=0.7)k(5,brac)o(k)o(etlength=0.15,rbrac)o(k)o
(etlength=0.15)p Fb(g)12 -993 y(n)p Fc(mak)o(eatletter)p
Fb(n)p Fc(@ifundefined)p Fb(f)p Fc(Pst@correctAnglefalse)p
Fb(gfgfn)p Fc(psset)p Fb(f)p Fc(correctAngle=false)p
Fb(ggn)p Fc(mak)o(eatother)12 -943 y Fb(n)p Fc(b)q(egin)p
Fb(f)p Fc(pspicture)p Fb(g)p Fc(\(1.18,0\)\(21.18,19.02\))12
-894 y Fb(n)p Fc(pscustom[linecolor=red])p Fb(fn)p Fc
(psline\(17.36,0\)\(11.18,19.02\))12 -844 y Fb(n)p Fc(psb)q
(ezier\(11.18,19.02\)\(11.18,19.02\)\(11.18)q(,19.02\))12
-794 y Fb(n)p Fc(psline\(11.18,19.02\)\(5,0\))12 -744
y Fb(n)p Fc(psline\(5,0\)\(21.18,11.76\))12 -694 y Fb(n)p
Fc(psline\(21.18,11.76\)\(1.18,11.76\))12 -644 y Fb(n)p
Fc(psline\(1.18,11.76\)\(17.36,0\))12 -595 y Fb(n)p Fc(closepath)p
Fb(g)12 -545 y(n)p Fc(rput\(11.18,9.51\))p Fb(fn)p Fc(textcolor)p
Fb(f)p Fc(blue)p Fb(gfn)p Fc(large)f(5)p Fb(gg)12 -495
y(n)p Fc(end)p Fb(f)p Fc(pspicture)p Fb(g)p Black 0.648 0.165 0.165
TeXcolorrgb 12 -2115 a Fc(\045<?xml)17 b(v)o(ersion="1.0")j
(standalone="y)o(es"?>)12 -2065 y(\045<jpic)f(x-min="1.18")g
(x-max="21.18")g(y-min="0")g(y-max="19.02")g(auto-b)q(ounding="true">)
12 -2015 y(\045<m)o(ulticurv)o(e)f(strok)o(e-color="#ff0000")12
-1965 y(\045p)q(oin)o
(ts="\(17.36,0\);\(17.36,0\);\(11.18,19.02\);\(11.18,19.02\))q
(;\(11.18,19)q(.02\);\()q(11.18,19)q(.02\);)12 -1915
y(\045\(11.18,19.02\);\(11.18,19.02\);\(5,0\);\(5,0\);\(5,0\);\(2)q
(1.18,11.76\))q(;)12 -1866 y
(\045\(21.18,11.76\);\(21.18,11.76\);\(1.18,11.76\);\(1.18,11.76\))q
(;\(1.18,11.76)q(\);\(1)q(7.36,0\))q(")12 -1816 y(\045/>)12
-1766 y(\045<text)i(anc)o(hor-p)q(oin)o(t="\(11.18,9.51\)")12
-1716 y(\045>)12 -1666 y(\045)p Fb(n)p Fc(textcolor)p
Fb(f)p Fc(blue)p Fb(gfn)p Fc(large)g(5)p Fb(g)12 -1617
y Fc(\045</text>)12 -1567 y(\045</jpic>)p Black 0 0 1
TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb 12 -2740 a(\045)f(V)l
(ersion:)25 b($Id:)g(help.RedStar.jp)q(e.pstric)o(ks,v)d(1.2)e
(2013/02/28)i(21:37:47)e(vincen)o(tb1)h(Exp)f($)p 0 0 1
TeXcolorrgb 12 -2690 a Fb(n)p Fc(ifx)p Fb(n)p Fc(JPicIsIncluded)p
Fb(n)p Fc(undefined)12 -2640 y Fb(n)p Fc(do)q(cumen)o(tclass)p
Fb(f)p Fc(article)p Fb(g)12 -2590 y(n)p Fc(usepac)o(k)m(age[tigh)o
(tpage,activ)o(e,psfixbb])p Fb(f)p Fc(preview)p Fb(g)12
-2540 y(n)p Fc(usepac)o(k)m(age)p Fb(f)p Fc(pstric)o(ks)p
Fb(g)12 -2490 y(n)p Fc(b)q(egin)p Fb(f)p Fc(do)q(cumen)o(t)p
Fb(g)12 -2441 y(n)p Fc(thispagest)o(yle)p Fb(f)p Fc(empt)o(y)p
Fb(g)12 -2391 y(n)p Fc(b)q(egin)p Fb(f)p Fc(preview)p
Fb(g)12 -2341 y(n)p Fc(fi)p Black 0.648 0.165 0.165 TeXcolorrgb
12 -2273 a(\045\045Created)g(b)o(y)f(jPicEdt)j(1.6-pre1:)k(mixed)19
b(JPIC-XML/LaT)l(eX)g(format)12 -2223 y(\045\045Sat)g(F)l(eb)h(23)g
(13:55:10)h(CET)e(2013)12 -2173 y(\045\045Begin)g(JPIC-XML)p
Black 0.648 0.165 0.165 TeXcolorrgb 12 -1504 a(\045\045End)g(JPIC-XML)p
Black 0.648 0.165 0.165 TeXcolorrgb 12 -441 a(\045\045User)g(Data)p
Black 0 0 1 TeXcolorrgb 12 -379 a Fb(n)p Fc(ifx)p Fb(n)p
Fc(JPicIsIncluded)p Fb(n)p Fc(undefined)12 -329 y Fb(n)p
Fc(end)p Fb(f)p Fc(preview)p Fb(g)12 -279 y(n)p Fc(end)p
Fb(f)p Fc(do)q(cumen)o(t)p Fb(g)12 -229 y(n)p Fc(fi)p
0.648 0.165 0.165 TeXcolorrgb 12 -179 a(\045\045\045)f(Lo)q(cal)j(V)l
(ariables:)p 0 0 1 TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb
12 -129 a(\045\045\045)d(mo)q(de:)26 b(latex)p 0 0 1
TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb 12 -80 a(\045\045\045)18
b(ev)m(al:)25 b(\(T)l(eX-PDF-mo)q(de)20 b(0\))p 0 0 1
TeXcolorrgb 0.648 0.165 0.165 TeXcolorrgb 12 -30 a(\045\045\045)e(End:)
p 0 0 1 TeXcolorrgb Black 0 0 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 289.50526 348.54442 285.94868 344.98784 278.83554
341.43127 278.83554   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 303.73157 348.54442 289.50526
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 307.28815 352.101
307.28815 348.54442 307.28815   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 310.84471 348.54442
307.28815 352.101 307.28815   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 328.6276 348.54442
310.84471   /currentpoint load stopped pop  /Lineto /lineto load def
0  setlinejoin false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  [ 341.43127 335.74075
344.98784 335.74075 348.54442 332.18417   /currentpoint load stopped
pop false  OpenBezier  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 263.35732 348.54442 262.16231 344.98784 259.7723
341.43127 259.7723   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 268.10889 348.54442 263.35732
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 269.3039 352.101 269.3039
348.54442 269.3039   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 270.49895 348.54442 269.3039
352.101 269.3039   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 276.44553 348.54442 270.49895
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 341.43127 278.83554 344.98784
278.83554 348.54442 277.64053   /currentpoint load stopped pop false
 OpenBezier  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 200.24945 348.54442 195.61166 344.98784 186.36456
341.43127 186.36456   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 218.74364 348.54442 200.24945
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 223.35295 352.101
223.35295 348.54442 223.35295   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 227.96227 348.54442
223.35295 352.101 223.35295   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 251.09424 348.54442
227.96227   /currentpoint load stopped pop  /Lineto /lineto load def
0  setlinejoin false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  [ 341.43127 260.34134
344.98784 260.34134 348.54442 255.73203   /currentpoint load stopped
pop false  OpenBezier  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 180.04808 348.54442 179.56439 344.98784 178.68237
341.43127 178.68237   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 181.81213 348.54442 180.04808
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 182.23894 352.101
182.23894 348.54442 182.23894   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 182.66571 348.54442
182.23894 352.101 182.23894   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 184.9135 348.54442
182.66571   /currentpoint load stopped pop  /Lineto /lineto load def
0  setlinejoin false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  [ 341.43127 185.79552
344.98784 185.79552 348.54442 185.3687   /currentpoint load stopped
pop false  OpenBezier  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 80.43552 348.54442 72.86711 344.98784 57.75879
341.43127 57.75879   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 110.65218 348.54442 80.43552
  /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 118.22058 352.101
118.22058 348.54442 118.22058   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 125.78899 348.54442
118.22058 352.101 118.22058   /currentpoint load stopped pop false
 OpenBezier   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 348.54442 163.57404 348.54442
125.78899   /currentpoint load stopped pop  /Lineto /lineto load def
0  setlinejoin false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  [ 341.43127 178.68237
344.98784 178.68237 348.54442 171.11397   /currentpoint load stopped
pop false  OpenBezier  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 51.98291 348.54442 51.52766 344.98784 50.64565
341.43127 50.64565   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 53.74696 348.54442 51.98291 
 /currentpoint load stopped pop  /Lineto /lineto load def 0  setlinejoin
false Line   0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 355.65758 54.20221 352.101 54.20221
348.54442 54.20221   /currentpoint load stopped pop false  OpenBezier
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 348.54442 54.65747 348.54442 54.20221 352.101
54.20221   /currentpoint load stopped pop false  OpenBezier   0.85358
SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def  [ 348.54442 56.87677 348.54442 54.65747   /currentpoint
load stopped pop  /Lineto /lineto load def 0  setlinejoin false Line
  0.85358 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto }
if } def /ArrowB { } def  [ 341.43127 57.75879 344.98784 57.75879 348.54442
57.30354   /currentpoint load stopped pop false  OpenBezier  gsave
0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.85358 SLW 0  setgray   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 9.50316 348.54442 6.31647 344.98784 0.0 341.43127
0.0   /currentpoint load stopped pop false  OpenBezier   0.85358 SLW
0  setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 22.16455 348.54442 9.50316   /currentpoint load
stopped pop  /Lineto /lineto load def 0  setlinejoin false Line   0.85358
SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def  [ 355.65758 25.3228 352.101 25.3228 348.54442 25.3228
  /currentpoint load stopped pop false  OpenBezier   0.85358 SLW 0
 setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB
{ } def  [ 348.54442 28.48103 348.54442 25.3228 352.101 25.3228   /currentpoint
load stopped pop false  OpenBezier   0.85358 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  [ 348.54442
44.32916 348.54442 28.48103   /currentpoint load stopped pop  /Lineto
/lineto load def 0  setlinejoin false Line   0.85358 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 341.43127 50.64565 344.98784 50.64565 348.54442 47.4874   /currentpoint
load stopped pop false  OpenBezier  gsave 0.85358 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
2953 -2584 a Fa(Pream)m(ble)34 b(to)e(the)h(user's)2953
-2468 y(guise)2953 -2269 y(Em)m(b)s(edded)h(JPIC-XML)2953
-2153 y(b)s(eginning)f(markup)2953 -1878 y(Prop)s(er)g(format)f(:)43
b(em)m(b)s(edded)2953 -1762 y(JPIC-XML)2953 -1546 y(Em)m(b)s(edded)34
b(JPIC-XML)g(end)2953 -1430 y(markup)2953 -1005 y(Exp)s(ort)f(format)f
(part:)2953 -889 y(PST)-8 b(ric)m(ks)35 b(in)e(this)g(case)2953
-483 y(User)g(p)s(ostam)m(ble)h(b)s(eginning)2953 -367
y(markup)2953 -243 y(P)m(ostam)m(ble)g(to)e(the)h(user's)2953
-127 y(guise)0 -2787 y @beginspecial @setspecial @endspecial
4134 0 a @beginspecial @setspecial @endspecial eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
