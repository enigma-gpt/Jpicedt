// Plot_parametric.bsh --- -*- coding: iso-8859-1 -*-
// August 30, 2002 - jPicEdt 1.3.2, a picture editor for LaTeX.
// Copyright (C) 1999/2002 Sylvain Reynal
// Copyright (C) 2003/2013 Sylvain Reynal, Vincent Belaïche
//
// Author: Sylvain Reynal
//         Département de Physique
//         École Nationale Supérieure de l'Électronique et de ses Applications (ÉNSÉA)
//         6, avenue du Ponceau
//         95014 CERGY CEDEX
//         FRANCE
//
//         Tel : +33 130 736 245
//         Fax : +33 130 736 667
//         e-mail : reynal@ensea.fr
//
// Version: $Id: Plot_parametric.bsh,v 1.4 2013/02/06 04:28:53 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et
// respectant les principes de diffusion des logiciels libres. Vous pouvez
// utiliser, modifier et/ou redistribuer ce programme sous les conditions
// de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
// sur le site "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie,
// de modification et de redistribution accordés par cette licence, il n'est
// offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
// seule une responsabilité restreinte pèse sur l'auteur du programme,  le
// titulaire des droits patrimoniaux et les concédants successifs.
//
// A cet égard  l'attention de l'utilisateur est attirée sur les risques
// associés au chargement,  à l'utilisation,  à la modification et/ou au
// développement et à la reproduction du logiciel par l'utilisateur étant
// donné sa spécificité de logiciel libre, qui peut le rendre complexe à
// manipuler et qui le réserve donc à des développeurs et des professionnels
// avertis possédant  des  connaissances  informatiques approfondies.  Les
// utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
// logiciel à leurs besoins dans des conditions permettant d'assurer la
// sécurité de leurs systèmes et ou de leurs données et, plus généralement,
// à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
// pris connaissance de la licence CeCILL, et que vous en avez accepté les
// termes.
//
/// Commentary:
// This BeanShell plots a (x(t),y(t)) function

/// Code:
import jpicedt.graphic.model.*;
import jpicedt.graphic.*;
import jpicedt.widgets.*;

boolean strictJava = true;
setStrictJava(strictJava);
// ------------ methods -----------------------------------------

//
// Round axis increments to the nearest "standard" tick, e.g. 0.12 -> 0.1 and 540 -> 500.
double roundIncrement(double x) {
	x = Math.abs(x);
	// compute mag. of integer part :
	double mag = Math.floor(Math.log(x)/Math.log(10)); // e.g. 12.45 -> 1 ; 900.1 -> 2
	// compute rounded integer part : (a number b/w 1 and 10)
	int n = (int)Math.round(x/Math.pow(10,mag));
	switch (n){
		case 1: break;
		case 2: break;
		case 3: n=2; break;
		case 4: n=5; break;
		case 6: n=5; break;
		case 7: n=5; break;
		case 8: n=10; break;
		case 9: n=10; break;
		default: n=10;
	}
	return (n*Math.pow(10,mag));
}

// scan each element in the Drawing, and match its class against that of currently selected element :
void proceed(){
	// draw graph :
	PicGroup g = new PicGroup();
	PicAttributeSet polyPAS = new PicAttributeSet();
	polyPAS.setAttribute(PicAttributeName.LINE_COLOR,Color.red);
	PicMultiCurve poly = new PicMultiCurve();
	poly.setAttributeSet(polyPAS);
	PageFormat pf = canvas().getPageFormat();
	double x0 = 10.0-pf.getLeftMarginMm(); // impose a minimum left margin for the graph (y-axis pad)
	double width=Math.min(pf.getWidthMm()-10.0, widthTF.getValue());
	double height=Math.min(pf.getHeightMm()-pf.getBottomMarginMm(), heightTF.getValue());
	int N = nbPtsTF.getValue();
	double tMin = tMinTF.getValue();
	double tMax = tMaxTF.getValue();
	if (tMax<=tMin) {
		mdimgr.showMessageDialog("tMin>=tMax !",scriptTitle,JOptionPane.ERROR_MESSAGE);
		return;
	}
	double tFactor = (tMax-tMin)/(N-1);
	double xMin, yMin;
	{
		setStrictJava(false);
		t=tMin;
		xMin=((Double)eval(xFunctionTF.getText())).doubleValue();
		yMin=((Double)eval(yFunctionTF.getText())).doubleValue();
		setStrictJava(strictJava);
	}
	double xMax=xMin;
	double yMax=yMin;
	double[] xx = new double[N];
	double[] yy = new double[N];
	xx[0]=xMin;
	yy[0]=yMin;
	for(int i=1; i<N; i++){
		{
			setStrictJava(false);
			t = tFactor * i + tMin; // t ranges from tMin to tMax
			xx[i] = ((Double)eval(xFunctionTF.getText())).doubleValue(); // eval return a Double here !
			yy[i] = ((Double)eval(yFunctionTF.getText())).doubleValue(); // eval return a Double here !
			setStrictJava(strictJava);
		}
		if (Double.isNaN(yy[i]) || Double.isNaN(xx[i])) {
			xx[i]=xx[i-1];
			yy[i]=yy[i-1];
			continue;
		}
		xMin = Math.min(xMin,xx[i]);
		xMax = Math.max(xMax,xx[i]);
		yMin = Math.min(yMin,yy[i]);
		yMax = Math.max(yMax,yy[i]);
	}
	if (xMin==xMax){ xMin -= 1.0; xMax += 1.0;}
	if (yMin==yMax){ yMin -= 1.0; yMax += 1.0;}
	double margin = (xMax-xMin)*0.05;
	xMin = xMin - margin;
	xMax = xMax + margin;
	margin = (yMax-yMin)*0.05;
	yMin = yMin - margin;
	yMax = yMax + margin;
	double xScale = width/(xMax-xMin);
	double yScale = height/(yMax-yMin);
	for(int i=0; i<N; i++){
		PicPoint pt = new PicPoint((xx[i]-xMin)*xScale+x0,(yy[i]-yMin)*yScale);
		poly.addPoint(pt);
	}
	g.add(poly);
	// draw X-axis :
	double xAxisOrd = Math.max(0,-yMin * yScale);
	PicAttributeSet axisPAS = new PicAttributeSet();
	axisPAS.setAttribute(PicAttributeName.RIGHT_ARROW,StyleConstants.ArrowStyle.ARROW_HEAD);
	PicMultiCurve xAxis = new PicMultiCurve(new PicPoint(x0,xAxisOrd),new PicPoint(x0+width,xAxisOrd),axisPAS);
	g.add(xAxis);
	// draw Y-axis :
	double yAxisAbs = Math.max(x0,-xMin * xScale+x0);
	PicMultiCurve yAxis = new PicMultiCurve(new PicPoint(yAxisAbs,0),new PicPoint(yAxisAbs,height),axisPAS);
	g.add(yAxis);
	// draw X-axis tick marks :
	double xInc = roundIncrement(15.0/xScale);
	for (double x=xInc; x < xMax; x+=xInc){
		double xTick= (x-xMin)*xScale+x0;
		if (xTick<x0) continue;
		g.add(new PicMultiCurve(new PicPoint(xTick,xAxisOrd-0.02*width),new PicPoint(xTick,xAxisOrd)));
		PicText text = new PicText(
			new PicPoint(xTick,xAxisOrd-0.04*width),
			Double.toString(x),
			PicAttributeSet.DEFAULT_SET);
		g.add(text);
	}
	for (double x=-xInc; x>xMin; x-=xInc){
		double xTick= (x-xMin)*xScale+x0;
		if (xTick<x0) continue;
		g.add(new PicMultiCurve(new PicPoint(xTick,xAxisOrd-0.02*width),new PicPoint(xTick,xAxisOrd)));
		PicText text = new PicText(
			new PicPoint(xTick,xAxisOrd-0.04*width),
			Double.toString(x),
			PicAttributeSet.DEFAULT_SET);
		g.add(text);
	}
	// draw Y-axis tick marks :
	PicAttributeSet yAxisTxtPAS = new PicAttributeSet();
	yAxisTxtPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,PicText.HorAlign.RIGHT);
	double yInc = roundIncrement(10.0/yScale);
	for (double y=yInc; y < yMax; y+=yInc){
		double yTick= (y-yMin)*yScale;
		g.add(new PicMultiCurve(new PicPoint(yAxisAbs-0.02*height,yTick),new PicPoint(yAxisAbs,yTick)));
		PicText text = new PicText(
			new PicPoint(yAxisAbs-0.04*width,yTick),
			Double.toString(y), yAxisTxtPAS);
		g.add(text);
	}
	for (double y=-yInc; y > yMin; y-=yInc){
		double yTick= (y-yMin)*yScale;
		g.add(new PicMultiCurve(new PicPoint(yAxisAbs-0.02*height,yTick),new PicPoint(yAxisAbs,yTick)));
		PicText text = new PicText(
			new PicPoint(yAxisAbs-0.04*width,yTick),
			Double.toString(y),
			yAxisTxtPAS);
		g.add(text);
	}
	drawing().add(g);
	jf.dispose();
}


// -------------------- main --------------------------------------

String scriptTitle="Plot (x(t),y(t))";

if (canvas()==null) {
	mdimgr.showMessageDialog("First open a board!",scriptTitle,JOptionPane.ERROR_MESSAGE);
	return;
}

// create user pane :
JPanel box = new JPanel(new GridLayout(4,4,5,5));
box.add(new JLabel("x(t)"));
JTextField xFunctionTF=new JTextField("Math.sin(t)"); box.add(xFunctionTF);
box.add(new JLabel("y(t)"));
JTextField yFunctionTF=new JTextField("Math.cos(t)"); box.add(yFunctionTF);
box.add(new JLabel("tMin"));
DecimalNumberField tMinTF=new DecimalNumberField(0.0,10,true); box.add(tMinTF);
box.add(new JLabel("tMax"));
DecimalNumberField tMaxTF=new DecimalNumberField(2.0*Math.PI,10,true); box.add(tMaxTF);
box.add(new JLabel("Graph witdh (mm)"));
DecimalNumberField widthTF=new DecimalNumberField(50,10,true); box.add(widthTF);
box.add(new JLabel("Graph height (mm)"));
DecimalNumberField heightTF=new DecimalNumberField(50,10,true); box.add(heightTF);
box.add(new JLabel("Nb points"));
WholeNumberField nbPtsTF=new WholeNumberField(50,10); box.add(nbPtsTF);
JButton but = new JButton("Graph it !");
box.add(but);
ActionListener al = new ActionListener(){
		void actionPerformed(ActionEvent e){proceed();}
};
but.addActionListener(al);
but = new JButton("Exit");
box.add(but);
al = new ActionListener(){
		void actionPerformed(ActionEvent e){ jf.dispose();}
};
but.addActionListener(al);

boolean modal = true;
MDIComponent jf = mdimgr.createDialog(scriptTitle, modal, box);
jf.setVisible(true);
