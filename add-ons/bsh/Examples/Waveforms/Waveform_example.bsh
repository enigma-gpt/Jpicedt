// Waveform_example.bsh --- -*- coding: iso-8859-1 -*-
// December 2, 2012 - jPicEdt 1.6, a picture editor for LaTeX.
// Copyright (C) 2012 Vincent Belaïche
//
// Author: Vincent Belaïche <vincentb1@users.sourceforge.net>
// Version: $Id: Waveform_example.bsh,v 1.1 2012/12/02 18:02:53 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et
// respectant les principes de diffusion des logiciels libres. Vous pouvez
// utiliser, modifier et/ou redistribuer ce programme sous les conditions
// de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
// sur le site "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie,
// de modification et de redistribution accordés par cette licence, il n'est
// offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
// seule une responsabilité restreinte pèse sur l'auteur du programme,  le
// titulaire des droits patrimoniaux et les concédants successifs.
//
// A cet égard  l'attention de l'utilisateur est attirée sur les risques
// associés au chargement,  à l'utilisation,  à la modification et/ou au
// développement et à la reproduction du logiciel par l'utilisateur étant
// donné sa spécificité de logiciel libre, qui peut le rendre complexe à
// manipuler et qui le réserve donc à des développeurs et des professionnels
// avertis possédant  des  connaissances  informatiques approfondies.  Les
// utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
// logiciel à leurs besoins dans des conditions permettant d'assurer la
// sécurité de leurs systèmes et ou de leurs données et, plus généralement,
// à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
// pris connaissance de la licence CeCILL, et que vous en avez accepté les
// termes.
//
/// Commentary:

// This BeanShell script demonstrate the use of Waveform.bshi
//

/// Code:

object = object();
savedNameSpace = this.namespace;
setNameSpace( object.namespace );

import jpicedt.ui.util.CommandLineBuilder;

CommandLineBuilder clb = new CommandLineBuilder();
source(clb.buildCommandLine("{j}/macros/lib/Waveform.bshi"));

setStrictJava(true);

if (canvas()==null)
{
	mdimgr.showMessageDialog("First open a board!","Waveform_example",JOptionPane.ERROR_MESSAGE);
	return;
}



WaveFormFactory wff = new WaveFormFactory();


wff.target = new PicGroup();

double t285 = 1.0/285.0; // period of clock @285MHz
double t30 = 1.0/30.0; // period of clock @30MHz
wff.usToMm = 20*30; // 20mm for 1cycle @30MHz

wff.raiseTime = 0.05*t285; // 5% of the fastest clock period looks good.

// override default settings for time:
wff.setTimeSpan( 0.0, 6.0*t30);
wff.setNoFold();

// vertical spacing
wff.yMin                 = 10;
wff.carriageReturnYSpace = 5;
wff.initAllBasic(4);

wff.addGap(4.15*t30,5.0*t30,0.25*t30);

wff.waveNameLabelFormat =  "\\parbox{" + Double.toString(wff.getXMin()) 
	+ "\\unitlength}{\\raggedleft %s}" ;

// 285 MHz clock
// ----------------------------------------------------------------------------
double dutyCycle = 0.5;
int    sigNb = 0;
wff.clock(
	sigNb++,                            // waveform number
	"clock @285MHz",           // waveform name
	t285*(1.0-dutyCycle)-wff.raiseTime,  // delay before first transition
	dutyCycle,	                  // ratio of state after 1st transition to inital state
	t285,		              // clock period
	"1"	                      // "0" or "1"
	);


// 30 MHz clock
// ----------------------------------------------------------------------------
wff.clock(
	sigNb++,                            // waveform number
	"clock @30MHz",                // waveform name
	t30*(1-dutyCycle)-wff.raiseTime, // delay before first transition
	dutyCycle,	                  // ratio of state after 1st transition to inital state
	t30,		                  // clock period
	"1"	                          // "0" or "1"
	);


// ----------------------------------------------------------------------------
wff.initCurrentWave(sigNb++,"Pulse","0",0);
wff.addPoint(4*t285,"1");
wff.addPoint(5.0*t285,"0");
wff.addPoint(wff.getEndTime(),"0");
wff.close();

// ----------------------------------------------------------------------------
wff.initCurrentWave(sigNb++,"Extended pulse","0",0);
wff.addPoint(4*t285,"1");
wff.addPoint(2*t30,"0");
wff.addPoint(wff.getEndTime(),"0");
wff.close();

drawing().add(wff.target);


// step back 
setStrictJava(false);
setNameSpace( savedNameSpace );


