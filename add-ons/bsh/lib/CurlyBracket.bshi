// CurlyBracket.bshi --- -*- coding: iso-8859-1 -*-
// December 2, 2012 - jPicEdt 1.6, a picture editor for LaTeX.
// Copyright (C) 2012 Vincent Belaïche
//
// Author: Vincent Belaïche <vincentb1@users.sourceforge.net>
// Version: $Id: CurlyBracket.bshi,v 1.3 2013/05/11 06:40:16 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et respectant les principes de
// diffusion des logiciels libres. Vous pouvez utiliser, modifier et/ou redistribuer ce programme sous les
// conditions de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA sur le site
// "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie, de modification et de
// redistribution accordés par cette licence, il n'est offert aux utilisateurs qu'une garantie limitée.  Pour
// les mêmes raisons, seule une responsabilité restreinte pèse sur l'auteur du programme, le titulaire des
// droits patrimoniaux et les concédants successifs.
//
// À cet égard l'attention de l'utilisateur est attirée sur les risques associés au chargement, à
// l'utilisation, à la modification et/ou au développement et à la reproduction du logiciel par l'utilisateur
// étant donné sa spécificité de logiciel libre, qui peut le rendre complexe à manipuler et qui le réserve
// donc à des développeurs et des professionnels avertis possédant des connaissances informatiques
// approfondies.  Les utilisateurs sont donc invités à charger et tester l'adéquation du logiciel à leurs
// besoins dans des conditions permettant d'assurer la sécurité de leurs systèmes et ou de leurs données et,
// plus généralement, à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris connaissance de la licence
// CeCILL, et que vous en avez accepté les termes.
//
/// Commentary:

// This BeanShell script can be used to draw curly brackets with text labels.
//

/// Code:


import java.lang.Math;

public class CurlyBracketFactory
{

	private double bracketHeight = 3.0;
	private double bracketCtrlHeightFactor = 1.0; // height = bracketCtrlHeightFactor*bracketHeight
	private double bracketCos = 0.5;
	private double bracketSin = 0.866025403784;
	private PicAttributeSet bracketPAS = PicAttributeSet.DEFAULT_SET;
	private PicAttributeSet textPAS = new PicAttributeSet();
	private double defaultTextPosition = 0.5;


	private PicVector defaultDir = PicVector.X_AXIS; // to be used when pt2 = pt1
	private boolean autoPos = true;
	private boolean autoFormat = true;
	
	public void setAutoPos(boolean autoPos){ this.autoPos = autoPos; }
	public void setAutoFormat(boolean autoFormat){ this.autoFormat = autoFormat; }

	public void setHeight(double height){ this.bracketHeight = height; }
	public double getHeight(){ return height; }
	public void setDefaultDir(PicVector defaultDir){
		double width = defaultDir.norm();
		if(width != 0.0){
			if(width == 1.0)
				this.defaultDir = new PicVector(defaultDir).normalize();
			else
				this.defaultDir = new PicVector(defaultDir);
		}
		else{
			setStrictJava(false);
			error("defaultDir = 0");
		}
	}

	private PicPoint latestBracketTip = null;

	public BranchElement target = new PicGroup();

	public void setTarget(BranchElement target){ this.target = target; }
	public void setTextPAS(PicAttributeSet textPAS){ this.textPAS = textPAS; }
	public PicAttributeSet getTextPAS(){ return this.textPAS; }

	public CurlyBracketFactory(BranchElement target){ this.target = target; }

	
	private double marginH = 0.0; // Vertical margin on text
	private String formatStr = "%s"; 

	public void setFormatStr(String formatStr){ this.formatStr = formatStr; }

	

	public void setBracketAngle(double angle){
		double rangle = Math.toRadians(angle);
		bracketCos = Math.cos(rangle);
		bracketSin = Math.sin(rangle);
	}

	/**
	   @param pt1 Point at one end of the bracket
	   @param pt2 Point at the other end of the bracket
	   @param textPosition in ]0, 1[
	   @param text Label if any, may be null if no text
	 */
	public void draw(PicPoint pt1, PicPoint pt2, double textPosition, String text){
		PicVector u = new PicVector(pt1, pt2);
		double width = u.norm();
		PicVector v;
		PicMultiCurve ret;
		if(width > 0.0){
			u.scale(textPosition);
			v = (new PicVector(u)).iMul().normalize();
			latestBracketTip = new PicPoint(pt1).translate(u).translate(v,bracketHeight);
			u.scale(1.0/(textPosition * width));

			ret = new PicMultiCurve(pt1, bracketPAS);
		
			double h = bracketHeight * bracketCtrlHeightFactor;
			double l = h * bracketCos / bracketSin;
			PicVector dir = new PicVector(u).scale(l).translate(v,h);
			
			PicPoint p1 = new PicPoint(pt1).translate(dir,1);
			PicPoint p2 = new PicPoint(latestBracketTip).translate(dir,-1);

			ret.curveTo(p1, p2, latestBracketTip);
			
			p1.setCoordinates(latestBracketTip).translate(dir.translate(u,-2*l),-1);
			p2.setCoordinates(pt2).translate(dir,1);
			ret.curveTo(p1, p2, pt2);
			
		}
		else{
			v = defaultDir.cIMul();
			ret = new PicMultiCurve(pt1, bracketPAS);
			ret.lineTo(latestBracketTip = new PicPoint(pt1).translate(v,bracketHeight));
		}
		target.add(ret);

		if(autoPos){
			double angle = PicVector.X_AXIS.angle(v);
			if(angle >= -Math.PI*0.25  && angle <= Math.PI*0.25){
				textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.LEFT);
				textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.CENTER);
				if(autoFormat){
					Object[] args = { width - marginH };
					this.formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\raggedright %%s}", args);
				}
			}
			else if(angle >= -Math.PI*0.75 && angle <= -Math.PI*0.25){
				textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.CENTER);
				textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.TOP);
				if(autoFormat){
					Object[] args = { width - marginH };
					this.formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\centering %%s}", args);
				}
			}
			else if(angle <= -Math.PI*0.75 || angle >= +Math.PI*0.75){
				textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.RIGHT);
				textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.CENTER);
				if(autoFormat){
					Object[] args = { width - marginH };
					this.formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\raggedleft %%s}", args);
				}
			}
			else{
				textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.CENTER);
				textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.BOTTOM);
				if(autoFormat){
					Object[] args = { width - marginH };
					this.formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\centering %%s}", args);
				}
			}
		}

		if(text != null){
			Object[] args = {text};
			target.add(new PicText(latestBracketTip, String.format(this.formatStr, args), textPAS));
		}
	}

	public void draw(PicPoint from, PicPoint to, String str){
		this.draw(from, to, defaultTextPosition, str);
	}


	public void drawH(double xFrom, double xTo, double y, String str){
		PicVector saveDefaultDir = this.defaultDir;
		if(this.defaultDir.getY() != 0){
			this.defaultDir = PicVector.X_AXIS;
		}
		this.draw(new PicPoint(xFrom, y), new PicPoint(xTo, y), str);
		this.defaultDir = saveDefaultDir;
	}

}

