// RibbonArrow.bshi --- -*- coding: iso-8859-1 -*-
// December 2, 2012 - jPicEdt 1.6, a picture editor for LaTeX.
// Copyright (C) 2012 Vincent Belaïche
//
// Author: Vincent Belaïche <vincentb1@users.sourceforge.net>
// Version: $Id: RibbonArrow.bshi,v 1.1 2012/12/02 18:03:23 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et
// respectant les principes de diffusion des logiciels libres. Vous pouvez
// utiliser, modifier et/ou redistribuer ce programme sous les conditions
// de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
// sur le site "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie,
// de modification et de redistribution accordés par cette licence, il n'est
// offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
// seule une responsabilité restreinte pèse sur l'auteur du programme,  le
// titulaire des droits patrimoniaux et les concédants successifs.
//
// A cet égard  l'attention de l'utilisateur est attirée sur les risques
// associés au chargement,  à l'utilisation,  à la modification et/ou au
// développement et à la reproduction du logiciel par l'utilisateur étant
// donné sa spécificité de logiciel libre, qui peut le rendre complexe à
// manipuler et qui le réserve donc à des développeurs et des professionnels
// avertis possédant  des  connaissances  informatiques approfondies.  Les
// utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
// logiciel à leurs besoins dans des conditions permettant d'assurer la
// sécurité de leurs systèmes et ou de leurs données et, plus généralement,
// à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
// pris connaissance de la licence CeCILL, et que vous en avez accepté les
// termes.
//
/// Commentary:

// This BeanShell script can be used to draw ribbon like arrows.
//

/// Code:




//                   <-> tipLength
//         +---------+    ^
//        /			  \	  |
//       + 			   +  |height
//		  \			  /	  |
//		   +---------+	  v
public class RibbonOutOutArrowFactory{

	public PicAttributeSet arrowPAS; // private
	public double          lengthScale; // private

	public void setLengthScale(double lengthScale){ this.lengthScale = lengthScale; }

	public PicAttributeSet getArrowPAS(){ return arrowPAS; }

	private PicAttributeSet pasTxt   = new PicAttributeSet();
	public double halfHeight = 5; // private
	public double tipLength = 3; // private

	public setTipLength(double tipLength){ this.tipLength = tipLength; }

	public BranchElement target; // private

	public double getHalfHeight(){ return halfHeight; }
	public void setHalfHeight(double  halfHeight){  this.halfHeight = halfHeight; }

	public void setTarget(BranchElement target){
		this.target = target;
	}




	public RibbonOutOutArrowFactory(BranchElement target){
		this.target = target;
		this.arrowPAS = new PicAttributeSet();
		this.arrowPAS.setAttribute(PicAttributeName.FILL_STYLE, StyleConstants.FillStyle.SOLID);
		this.lengthScale = 1.0;
	}

	public RibbonOutOutArrowFactory(RibbonOutOutArrowFactory other){
		this.target = other.target;
		this.arrowPAS = new PicAttributeSet(other.arrowPAS);
		this.lengthScale = other.lengthScale;
		this.halfHeight  = other.halfHeight;
		this.tipLength  = other.tipLength;
	}

	private String formatStr = "%s";
	public void setFormatStr(String s){
		this.formatStr = s;
	}
	public String getFormatStr(){
		return this.formatStr;
	}

	public void setColor(Color c){
		arrowPAS.setAttribute(PicAttributeName.LINE_COLOR, c);
		arrowPAS.setAttribute(PicAttributeName.FILL_COLOR, c);
	}


	public void draw(PicPoint from, PicPoint to, String str){

		PicMultiCurve arrow = new PicMultiCurve(from, arrowPAS);

		PicPoint pt = new PicPoint(from);
		PicVector u = (new PicVector(from, to));
		double l = u.norm();
		u.scale(1.0/l);
		PicVector v = u.cIMul();

		arrow.lineTo(pt.translate(u,tipLength).translate(v, halfHeight));
		arrow.lineTo(pt.translate(u,l-2*tipLength));
		arrow.lineTo(pt.translate(u,tipLength).translate(v, -halfHeight));
		arrow.lineTo(pt.translate(u,-tipLength).translate(v, -halfHeight));
		arrow.lineTo(pt.translate(u,-l+2*tipLength));
		arrow.setClosed(true);
		target.add(arrow);

		if(str != null){
			Obect[] args = { str };

			str = String.format(formatStr, args);

			PicText txt = new PicText(from.clone().middle(to), str, pasTxt);

			target.add(txt);
		}

	}

	public void drawH(double xFrom, double xTo, double y, String str){
		this.draw(new PicPoint(xFrom, y), new PicPoint(xTo, y), str);
	}

	public void drawHCW(double xCenter, double width, double y, String str){
		this.drawH(xCenter - 0.5 * lengthScale * width, xCenter + 0.5 * lengthScale * width, y, str);
	}

	public void drawHLW(double xLeft, double width, double y, String str){
		this.drawH(xLeft, xLeft + lengthScale * width, y, str);
	}


	public void drawV(double x, double yFrom, double yTo, String str){
		this.draw(new PicPoint(x, yFrom), new PicPoint(x, yTo), str);
	}

}
