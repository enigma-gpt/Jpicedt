// PlainArrow.bshi --- -*- coding: iso-8859-1 -*-
// December 2, 2012 - jPicEdt 1.6, a picture editor for LaTeX.
// Copyright (C) 2012 Vincent Belaïche
//
// Author: Vincent Belaïche <vincentb1@users.sourceforge.net>
// Version: $Id: PlainArrow.bshi,v 1.2 2013/02/28 21:37:57 vincentb1 Exp $
// Keywords:
// X-URL: http://www.jpicedt.org/
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et
// respectant les principes de diffusion des logiciels libres. Vous pouvez
// utiliser, modifier et/ou redistribuer ce programme sous les conditions
// de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
// sur le site "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie,
// de modification et de redistribution accordés par cette licence, il n'est
// offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
// seule une responsabilité restreinte pèse sur l'auteur du programme,  le
// titulaire des droits patrimoniaux et les concédants successifs.
//
// A cet égard  l'attention de l'utilisateur est attirée sur les risques
// associés au chargement,  à l'utilisation,  à la modification et/ou au
// développement et à la reproduction du logiciel par l'utilisateur étant
// donné sa spécificité de logiciel libre, qui peut le rendre complexe à
// manipuler et qui le réserve donc à des développeurs et des professionnels
// avertis possédant  des  connaissances  informatiques approfondies.  Les
// utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
// logiciel à leurs besoins dans des conditions permettant d'assurer la
// sécurité de leurs systèmes et ou de leurs données et, plus généralement,
// à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
// pris connaissance de la licence CeCILL, et que vous en avez accepté les
// termes.
//
/// Commentary:

// This BeanShell script can be used to draw plain arrows, with text labels.
//

/// Code:



public class PlainArrowFactory{

	public PicAttributeSet arrowPAS; // private
	public double          lengthScale; // private
	public double          defaultTextPosition = 0.5;
	public double          marginV = 0.0;
	public double          marginH = 0.0;
	public boolean         autoPos = true; // whether text position relative to arrow is computed automatically
	public boolean         autoFormat = true;

	private boolean        autoPosIgnoreDirection = false;
	private double         autoPosIgnoreDirectionAngle = 0;

	private boolean        autoWidth = false;
	private double         preferredTextWidth = 60;


	public void setMarginV(double marginV){ this.marginV = marginV; }

	public void setLengthScale(double lengthScale){ this.lengthScale = lengthScale; }
	
	public PicAttributeSet getArrowPAS(){ return arrowPAS; }

	private PicAttributeSet textPAS   = new PicAttributeSet();

	public PicAttributeSet getTextPAS(){ return this.textPAS; }
	public void setTextRotation(double a){ 
		this.textPAS.setAttribute(PicAttributeName.TEXT_ROTATION, a); 
	}

	
	public BranchElement target; // private

	/**
	   @param state true to ignore direction of arrow, in that case direction is
	   reverted if absolute difference between arrow angle relative to X_AXIS
	   and <code>angle</angle> is more than 90°
	   @param angle reference preferred direction in ° when <code>state</code>
	   is set to true, ignored otherwise.
	 */
	public void setAutoPos(boolean state,double angle){
		this.autoPosIgnoreDirection = state;
		this.autoPosIgnoreDirectionAngle = Math.toRadians(angle) + Math.PI*0.5;
	}

	public void setAutoPos(boolean state){
		setAutoPosIgnoreDirection(state, 0.0);
	}

	public void setAutoWidth(boolean autoWidth,double preferredTextWidth){
		this.autoWidth = autoWidth;
		this.preferredTextWidth = preferredTextWidth;
	}

	public void setAutoWidth(boolean autoWidth){
		this.autoWidth = autoWidth;
		this.preferredTextWidth = 60.0;
	}


	public void setTarget(BranchElement target){
		this.target = target;
	}

	public PlainArrowFactory(BranchElement target){
		this.target = target;
		this.arrowPAS = new PicAttributeSet();
		this.arrowPAS.setAttribute(PicAttributeName.RIGHT_ARROW, StyleConstants.ArrowStyle.ARROW_HEAD);
		this.lengthScale = 1.0;
	}

	public PlainArrowFactory(PlainArrowFactory other){
		this.target = other.target;
		this.arrowPAS = new PicAttributeSet(other.arrowPAS);
		this.lengthScale = other.lengthScale;
	}

	private String formatStr = "%s";
	public void setFormatStr(String s){
		this.formatStr = s;
	}
	public String getFormatStr(){
		return this.formatStr;
	}

	public void setColor(Color c){
		arrowPAS.setAttribute(PicAttributeName.LINE_COLOR, c);
	}

	public void draw(PicPoint from, PicPoint to){
		PicMultiCurve arrow = new PicMultiCurve(from, to, arrowPAS);
		target.add(arrow);
	}


	public void draw(PicPoint from, PicPoint to, double textPosition, String str){

		draw(from, to);

		if(str != null){
			PicVector u = new PicVector(from, to);
			double width = u.norm();
			u.scale(1.0/width);
			PicVector v  = u.cIMul();
			double textRotation = Math.toRadians(textPAS.getAttribute(PicAttributeName.TEXT_ROTATION));

			PicPoint  txtPos = from.clone().translate(u, width * textPosition).translate(v, marginV);

			double textWidth;
			if(autoWidth) {
				double actr = Math.abs(Math.cos(textRotation));
				if(actr != 0.0)
					textWidth = width / actr;
				else
					textWidth = Double.POSITIVE_INFINITY;
			}
			else
				textWidth = preferredTextWidth;


			if(autoPos){
				double angle = PicVector.X_AXIS.angle(v);

				if(autoPosIgnoreDirection && Math.cos(angle - autoPosIgnoreDirectionAngle) < 0)
					angle += Math.PI;

				angle += textRotation;

				while(angle <= -Math.PI)
					angle += 2*Math.PI;
				while(angle > Math.PI)
					angle -= 2*Math.PI;

				if(angle >= -Math.PI*0.25  && angle <= Math.PI*0.25){
					// normal to East
					textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.LEFT);
					textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.CENTER);
					if(autoFormat){
						if(textWidth != Double.POSITIVE_INFINITY){
							Object[] args = { textWidth - marginH };
							formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\raggedright %%s}", args);
						}
						else
							formatStr = "%s";
					}
				}
				else if(angle >= -Math.PI*0.75 && angle <= -Math.PI*0.25){
					// normal to South
					textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.CENTER);
					textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.TOP);
					if(autoFormat){
						if(textWidth != Double.POSITIVE_INFINITY){
							Object[] args = { textWidth - marginH };
							formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\centering %%s}", args);
						}
						else
							formatStr = "%s";
					}
				}
				else if(angle <= -Math.PI*0.75 || angle >= +Math.PI*0.75){
					// normal to West
					textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.RIGHT);
					textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.CENTER);
					if(autoFormat){
						if(textWidth != Double.POSITIVE_INFINITY){
							Object[] args = { textWidth - marginH };
							formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\raggedleft %%s}", args);
						}
						else
							formatStr = "%s";
					}
				}
				else{
					// normal to North
					textPAS.setAttribute(PicAttributeName.TEXT_HOR_ALIGN,  PicText.HorAlign.CENTER);
					textPAS.setAttribute(PicAttributeName.TEXT_VERT_ALIGN, PicText.VertAlign.BOTTOM);
					if(autoFormat){
						if(textWidth != Double.POSITIVE_INFINITY){
							Object[] args = { textWidth - marginH };
							formatStr = String.format(Locale.US,"\\parbox{%f\\unitlength}{\\centering %%s}", args);
						}
						else
							formatStr = "%s";
					}
				}
			}

			Object[] args = { str };
			str = String.format(formatStr, args);

			PicText txt = new PicText(txtPos, str, textPAS);

			target.add(txt);
		}
		
	}

	public void draw(PicPoint from, PicPoint to, String str){
		this.draw(from, to, defaultTextPosition, str);
	}

	public void drawH(double xFrom, double xTo, double y, String str){
		this.draw(new PicPoint(xFrom, y), new PicPoint(xTo, y), str);
	}

	public void drawH(double xFrom, double xTo, double y){
		this.drawH(xFrom, xTo, y, null);
	}


	public void drawHCW(double xCenter, double width, double y, String str){
		this.drawH(xCenter - 0.5 * lengthScale * width, xCenter + 0.5 * lengthScale * width, y, str);
	}


	public void drawHLW(double xLeft, double width, double y, String str){
		this.drawH(xLeft , xLefth + lengthScale * width, y, str);
	}


	public void drawV(double x, double yFrom, double yTo, String str){
		this.draw(new PicPoint(x, yFrom), new PicPoint(x, yTo), str);
	}

	public void drawV(double x, double yFrom, double yTo){
		this.draw(new PicPoint(x, yFrom), new PicPoint(x, yTo), null);
	}

}
